* java语言概述
** java语言特点
   1. 面向对象
      - 基本 类，对象
      - 特性 封装 继承 多态
   2. 健壮性
      吸收C/C++的优点，但去掉了影响程序健壮性的部分（如指针，内存的申请与释放等）
      提供一个相对安全的内存管理和访问机制
   3. 跨平台性
      由于JVM的存在，java语言可以实现跨平台

** java核心机制
   1. java虚拟机(JVM JAVA VIRTAL MACHINE)
      - JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域，负责执行指令，管理
        数据，内存和寄存器等。
      - 不同的平台，有不同虚拟机
      - 虚拟机屏蔽了底层的运行平台的差别。
   2. 垃圾回收
      - 垃圾回收在java程序运行中自动进行，程序员无法精确控制和干预
** java的环境
   JDK=JRE + 开发工具包
   JRK=JVM + javaSE标准类库

* java基本语法
** 关键字和保留字
*** 关键字(keyword)
    定义： 由java赋予了特殊含义，有专门用途的字符串
    特点： 关键字中的所有字母为小写
*** 保留子(reserved word)
    定义： 现版本尚未使用，但以后的版本可能作为关键字使用。自己命名标识符时
    要避免这类保留字 goto const
** 标识符(identifier)
   1. java对各种变量，方法和类名等要素命名时使用的字符序列称为标识符
   2. 标识符的命名规则(不能违反)
      - 标识符由26个字母，0-9, $和_(下划线)组成
      - 标识符不能以数字开头
      - 不可以使用关键字和保留字，但是可以包含它们
      - JAVAA中严格区分大小写，长度无限制
      - 标识符不能包含空格
   3. java中的名称命名规范
      :包名:          多单词组成时所有字母都小写： helloworld
      :类名，接口名:  多单组成时，所有单词的首字母都大写: HelloWorld
      :变量名，方法名: 多单词组成时，第一个单词首字母都小写，第二个每个单词
                        首字母都大写 helloWorld
      :常量名: 所有字母都大写
   注意： 尽量避免名字毫无意义
   注意2： java采用unicode字符集，因此标识符可以使用汉字，但是不建议
** 变量
*** 变量的概念
    - 内存中的一个存储区域
    - 该区域的数据可以在同一类型范围内不断变化
    - 变量是程序中基本的储存单元，包含变量名，变量类型和变量值
    变量的作用
    - 用于在内存中保存数据
    使用变量注意
    - Java中的每个变量必须先声明后使用
    - 使用变量名来访问这块区域的数据
    - 变量的作用域： 在{} 内
    - 变量只有在{}内才有效
    - 同一个作用域内，不能定义重名的变量
*** 变量的分类（按数据类型）
    数据类型
    - 基本数据类型(8种)
      - 数值型
        - 整数型： byte short int long
        - 浮点型: float double
      - 字符型(char)
      - 布尔型(boolean)
    - 引用数据类型(3种)
      - 类（class） 字符串也是类的一种
      - 接口(interface)
      - 数据([])
*** 变量的分类(按位置不同)
    1. 在方法体外，类体内声明的变量称为成员变量
    2. 在方法体内部声明的变量称为局部变量
       - 成员变量
         1. 实例变量（不以static修饰）
         2. 类变量(以static修饰)
       - 局部变量
         1. 形参（方法,构造器中定义的变量）
         2. 方法局部变量(在方法内定义)
         3. 代码快局部变量(在代码快内定义)x
*** 基本数据类型变量间转换
*** 基本数据类型与String间的转换
*** 进制与进制间的转换
* 问题
** java语法
*** java的类名和文件名
    1. java保存的文件名必须与类名一致
    2. 如果文件只有一个类，文件名必须和类名一致
    3. java中只能有一个public类
    4. 如果文件中不止一个类，那public类的名称必须和文件名一致-

*** 成员变量与局部变量异同
    同： 都有生命周期
    异:  局部变量除形参外，需显式初始化

* 常用类及其API
** System
- System.in 默认输入流
- System.out 默认输出流
- System.error 默认错误
- System.exit() 结束虚拟机
- System.gc() 请求系统回收器进行回收
- System.getProperty() 找到系统中的属性名
** Random
1. nextInt() 取一个随机的整数 在int值的范围内随机取值
2. 
** Math
- Math.round() 四舍五人(+0.5,然后向下取整)
- Math.ceil() 向上取整
- Math.floor() 向下取整
* Collection和Map
** 概述
1. List 存储无序的不可重复的数据
   - ArraryList LinkedList Vector
2. Set 存储无序的不可重复的数据
   - HashSet LinkedHashSet TreeSet
3. Map 存储一对一对的数值
   - Properties HaspMap LinkedHashMap TreeMap Hashtable
** Collection中方法的使用
**** ArrayList
- add(Object o) 向集合的末尾添加对象
- int size(Collection c) 集合中元素的个数
- boolean isEmpty(Collection c) 集合是否为空
- boolean contains(Object o) 集合中是否包含该对象
- boolean containsAll(Collection c) 集合中是否包含另一个集合中的所有元素
- boolean equals(Object o) 判断该对象与当前集合是否相等
- void clear() 清除当前集合内数据
- void remove(Object o) 删除集合中的对象
- Iterator iterator() 返回一个该集合的迭代器
  1. next() 指针下移，把当前指针上的元素返回
  2. hasNext() 判断集合中下一个元素是否存在
#+BEGIN_SRC java
  Collection c=new ArrayList();
  c.add("helloWorld");
  c.add("heu");
  Interator iter=c.iterator();
  while(iter.hasNext()){
      System.out.println(iter.next());
  }
#+END_SRC
** List接口
*** 概念
   用于存储有序的可以重复数字，可以替代数组，称为动态数组，因为List实现对象有序，
   所以会增加一些针对于索引的集合
*** List中的方法
1. 增加
   add(Object o) 当插入list时，会把它整体作为一个元素插入
   addAll(Object o)
2. 删除
   remove(int index)
3. 修改 修改指定位置的元素
   - set(int index,Object element);
4. 查询
   - get(int index)
5. 插入
6. 长度
7. 遍历
   - iterator()
   - enhanced for
   - normal for
*** ArrayList
**** 概述
底层使用Object数组存储,在添加和查找数据时效率较高。
*** Vector(向量)
**** 概述
底层使用Object数组存储
*** LinkedList
**** 概述
底层使用双向链表存储,在插入和删除数据效率较高。当对集合中数据进行频繁的删除和插入操作时使用它。
** Map接口
*** HashMap
健壮性好,效率高，但是线程不安全，可以添加null的key或value值 底层使用数组+单向链表+红黑树
= HashMap的key不能重复，所以是一个Set集合，所以要重写HashCode方法
*** LinkedHashMap
在HashMap的数据结构的基础之上，添加了双向链表，这样在遍历时，就可以按照添加的顺序进行遍历
*** Hashset
*** HashTable
古老实现类，线程安全，效率低下，不可以添加null的key或value值，底层使用数组+单向链表，由于不使用了，所
没有进行优化
*** TreeMap
- 向TreeMap中添加的
* Generic(泛型)
** 自定义泛型类/接口
#+BEGIN_SRC java
  public class Order<T>{
      //声明类的泛型参数以后，就可以在类的内部使用泛型参数
      T salary;
      public T getSalary(){
          retrun salary;
      }
  }
#+END_SRC
** 自定义泛型方法
#+BEGIN_SRC java
  public <E> E method(E e){
      return null;
  }
#+END_SRC
** ？通配符的使用
1. 当声明泛型类时，依旧不确定要传入的参数，就可以使用通配符
2. 因为不知道该类的元素类型，所以不能进行写入，唯一可以写入的是null类型，传递给add的类型
   必须是一个未知类型的子类
3. 不能使用在声明泛型方法，声明泛型类，创建对象上
4. ? extends base  问号的类型必须是base的extended类，比base功能更多，更加具体
5. ? super base 问号的类型必须是base的base类,比base功能更少，更加抽象化
6. <? extends class/interface>
   * 使用时指定的类型必须是继承某个类，或是实现某个接口,即>=
7. <? super class/interface>
   * 使用时指定的类型必须操作的类或接口，或者是操作的类的父类或者接口的父接口<=
* 集合源码解析
** ArrayList解析
*** JDK1.7
- 在1.7中，会初始化List中数组大小为10,
  当数组元素要满的时候，数组的长度会扩充到原来的1.5倍
*** JDK8
- 会创建List时，创建一个长度为零的数组,当第一次添加元素时，判断元素的长度是否大于10 ，
** Vector
- 默认初始化数组为10个元素，当添加第11个时，会扩容为原来的两倍
** LinkedList
   * 将要添加的元素封装到一个node中,node中first和last同时指向第一个元素
   * 添加第二元素后,第一个元素的last指向第二个元素，第二元素的first指向第一个元素
** HashMap
*** HashMap创建和put过程
- 创建对象的过程中，底层会初始化数组Entry[] table=new Entry[16]
  添加或者修改的过程:
  1. 要将(key1,value1)添加到过程中，首先要key1所在类的Hashcode方法，计算key1对应的
     Hash值1，Hash1经过算法(Hash())处理之后，得到Hash2,Hash2再次经过某种算法(indexFor)之后，
     这确定了其在数组table中的索引位置
  2. 如果索引位置上没有元素，则key1 value1添加成功
  3. 如果此索引位置上有元素，则需要比较要添加元素与已经存储于此位置上值比较Hash值2
     - 如果两个Hash值并不相同,则key1 value1 添加成功
     - 如果两个Hash2是也相同，则使用equals比较两个对象
       1. 如果两个对象equals true,默认情况value1替换原来的value2，认为修改行为
       2. 如果两个对象不同,则添加成功
  4. 如果该索引位置的元素已经达到了数组的0.75倍，则对数组进行扩容，默认扩容原来的2倍
     - 当进行初始化时，将数组长度不断做做移动 即扩容2倍
  5. key为null的情况下，value默认放在key为0的位置
  6. 如果put是修改操作，会返回旧的value值
  注意: Jdk8中只有当首次添加key-value时进行判断，如果发现当前table尚未初始化，则
  对当前数组进行初始化
*** JDK8和JDK7的不同之处
  1. 在jdk8中，当我们创建了HashMap实例以后，底层并没有初始化table数组，当首次添加(key,
value)时，再进行初始化.
  1. 在jdk8中，底层定义了node内部类，替换了jkd7的entry内部类，此时使用node[]数组
  2. 红黑树比正常链表多一倍的空间
* File类与IO流
** File的实例化与常用方法
*** File类的理解
java.io包中，本章中涉及的相关流也都声明在java.io包下。
- File类的一个对象，对应操作系统下的一个文件或者文件目录
- File的方法使用
  #+BEGIN_SRC java
    //public File(String pathname) pathname可以是绝对路径或者是相对路径
    //public File(String parent,String child) 以parent为父路径，child为子路径创建子路径
    //public File(File parent,String child) 以File对象和子路径创建file
    File file=new File("/home/akinjoker/hello.txt");
    File file1=new File("/home/akinjoker/","study-org");
    File file2=new File(File1,"test,org");
  #+END_SRC
- 在IDEA中使用单元测试方法，相对路径是相对于当前moudle
- 使用main主程序，相对路径则是相对于当前工程来讲
- 并没有涉及到对文件内容的读写操作，要想实现对于文件内容的读写，就要实现IO流
- File类的对象，通常是作为IO流操作的文件的端点出现
  - 代码丑奴儿该面 将File类作为参数传递到IO流相关类的构造器中
*** 获取文件和目录的基本信息
#+BEGIN_SRC java
  //public String getName() 获取文件名
  //public String getPaht() 获取路径
  //public String getAbsolutePath() 获取绝对路径
  //public File getAbsoluteFile() 以绝对路径的文件名
  //public String getParent() 上层文件目录
  //public Long getLength() 获取文件大小
  //public Long lastModified()  获取最后修改的字节
  //public String[] list() 返回一个File数组，表示该目录中的所有子文件或者目录
  //public File[] list() 返回一个File数组 表示该目录中的所有子文件或者目录
  //public boolean renameTo(File dest)把文件重命名为指定的文件路径 
#+END_SRC
*** 判断功能的方法
#+BEGIN_SRC java
- public boolean exists() ：此File表示的文件或目录是否实际存在。
- public boolean isDirectory() ：此File表示的是否为目录。
- public boolean isFile() ：此File表示的是否为文件。
- public boolean canRead() ：判断是否可读
- public boolean canWrite() ：判断是否可写
- public boolean isHidden() ：判断是否隐藏

#+END_SRC
*** 创建或者删除文件
#+BEGIN_SRC java
- public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false。
- public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。
- public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建。
- public boolean delete() ：删除文件或者文件夹
#+END_SRC

** File的实用案例
#+BEGIN_SRC java
#+END_SRC

** IO流的API
|----------+--------------+--------|
| 抽象基类 | 字节流       | 字符流 |
| 输入流   | InputStream  | Reader |
| 输出流   | OutputStream | Writer |
|----------+--------------+--------|
1. 节点流
   - FileInputStream
   - FileOuputStream
   - FileReader
   - FileWriter
     
** 文件输入流和输出流
*** 使用缓冲流读取文件内容
#+begin_src java
  BufferedReader reader=null;
        try {
            reader= new BufferedReader(new FileReader("hello.txt"));
            String data;
                while ((data=reader.readLine())!=null){
                    System.out.println(data);//每次读取一行，然后将一行数据打印
                }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }finally {
            try {
                assert reader != null;
                reader.close();
            }catch (IOException e) {
                e.printStackTrace();
            }
  }
#+end_src
*** 使用缓冲流复制文件内容
- Note taken on [2022-12-11 Sun 20:44] \\
  bufferedWriter.flush()可以删除内存中缓存的数据，并且将数据写入到磁盘上
#+begin_src java
  BufferedReader reader=null;
		BufferedWriter writer=null;
		try {
			reader= new BufferedReader(new FileReader("hello.txt"));
			writer=new BufferedWriter(new FileWriter("hello_copy.txt"));
			String data;
			while ((data=reader.readLine())!=null){
				//writer.write(data+"\n"); //每次读取一行文件的内容，但是必须加上换行符，否则写入时无法自动换行
				writer.write(data);
				writer.newLine();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			try {
				assert reader != null;
				reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

			try {
				assert writer != null;
				writer.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
	   }
#+end_src
** 文件的编码和解码
*** 概述
- 编码时使用的字符集和解码时使用的字符集必须一致或者后者兼容前者(解码集兼容编码集)
*** 在存储的文件中的字符
+ ASCII 主要用来存储abc等英文字符和1,2,3等常用的标点字符
+ ISO-8859-1 拉丁码，欧洲主要使用，兼容了拉丁码
+ UTF-8 字符集
  * Unicode是字符集，UTF-8、UTF-16、UTF-32是三种`将数字转换到程序数据`的编码方案。
	顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在
	互联网上`使用最广`的一种 Unicode 的实现方式。
  * 互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。
	在开发Web应用时，要使用UTF-8编码。UTF-8 是一种`变长的编码方式`。
	它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：
	1. 128个US-ASCII码，只需要一个字节编码
	2. 拉丁文等字符，需要两个字节编码
	3. 大部分常用字，使用三个字节编码
	4. 少数Unicode字符，使用四字节编码
+ GBK 中文相关的字符集
  - GB2312 7000个简体汉字
  - GBK 最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了`双字节`编码方案，
	共收录了`21003个`汉字，完全兼容GB2312标准，同时支持`繁体汉字`以及日韩汉字等。
  - GB18030 多字节编码，最新的中文码表。收录汉字`70244个`，采用`多字节`编码，每个字可以由1个、
	2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。
+ 内存的字符
  一个char占用两个字符,存储的文件当中根据字符集的不同，所占用的空间不同
** 对象流及其使用
*** 作用
- ObjectInputStream 可以读写基本数据类型的变量，引用数据类型的变量
- ObjectOutputStream 
*** 对象序列化机制是什么
**** 概述
对象的序列化机制允许把内存中的Java对象转换成平台无关的二进制流，而允许把这种二进制流持久
的保存在磁盘上，或通过网络将这种二进制流传输到另一个节点上
**** 序列化过程
使用ObjectOutputStream流实现，将内存中的Java对象保存在文件中或通过网络传输出去
**** 反序列化过程
使用ObjectInputStream流来实现，将网络中传输过来的对象转换为内存或者磁盘中的对象
*** 自定义类实现序列化机制
+ 自定义类需要实现接口 Serializable
+ 要求自定义类表明一个全局常量，static final long serializbale 
** 
* 网络编程
** 概述
Java是Internet上的语言，它从语言级上提供了了对网络应用程序的支持，程序员能够很容易开发
常见的网络应用
Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在
*** 软件架架构
C/S架构，全称为Client/Server结构,是指客户端和服务器结构
B/S架构，全称为Browser/Server结构,是指浏览器和服务器结构
** 目的
+ 目的传输信息,直接或间接地通过网络协议与其它计算机实现数据交流，进行
** 实现网络传输的三个要素
*** IP地址
+ 网络上计算机的地址
+ 由于分配的频段不够
+ 本地回路地址 127.0.0.1
*** 
** InetAddress
#+begin_src java
  InetAddress intet=InetAddress.getByName("www.atguigu.com");
  System.out.println(indet);
#+end_src
- getLocalHost() 获取本地ip
- getByName() 获取指定ip
** TCP协议和UDP协议
*** TCP
1. 需要客户端，服务端建立连接
2. 采用三次握手，点对点通信，可靠
3. 在连接中可进行大量数据数据的传输
4. 传输完毕，需要释放已建立的连接，效率低
** Socket类
+ 一个ip地址和端口号构成了一个Socket
+ 
* 反射
** 背景
- 对象的运行时的类型，编译时的类型不一致。
- 编译时无法预知对象和类的真实信息，程序只能依靠运行时信息来发现该对象的真实信息
** 反射概述
- 反射体现了动态性，可以在运行时动态的获取对象所属的类，动态的调用相关方法，所以我们在
  设计框架时，需要大量的使用反射.
** Class的实例可以加载哪些结构
1. 类
2. 接口
4. ElementType.class
5. Override.class
6. int[][].class
7. Class.class
** 类的加载
1. 加载
   - 装载
   - 链接
	 1. Verify 确保加载的类符合JVM规范，以cafebabe开头
	 2. Prepare 正式为内存分配并设置类变量默认初始值的阶段，这些内存都将方法区分配内存
	 3. Resolve 虚拟机常量池内将变量引用，替换常量池内的地址
   - 初始化 显式赋值，和构造器中赋值的阶段
** 类的加载器分类
+ BootstrapClassLoader 引导类加载器，启动类加载器
  + 使用C/C++语言编写，不能通过Java代码获取其实例
  + 负责加载Java的核心库(JAVA_HOME/jre/lib/rt,jar)
+ 继承于ClassLoader的类加载器
  + ExtensionClassLoader 扩展类加载器
	- 继承于ClassLoader
	- 父类加载器为启动类加载器
	- 赋值加载系统属性所指定的目录中的加载类库
  + SystemClassLoader/ApplicationClassLoader 系统类加载器，应用类加载器
	- 我们自定义的类，默认使用的类的加载器
  + 用户自定义类的加载器
** 用户自定义类的加载器
+ 需求，同时加载多个版本的包，同一个类在一个应用程序中加载多份，数据的加密
** 通过配置ClassLoader加载指定的配置文件
#+begin_src java
  ClassLoader.getSystemClassLoader().getResourceAsStream("info.properties");
  //默认路径为模块下src路径下
#+end_src
** 反射的应用
*** 创建运行时类的对象
**** 方法一：调用Class对象的newInstance()对象
1) 获取该类型的Class对象
2) 调用Class对象的Instance() 方法创建对象
**** 方法二：获取构造器对象来进行实例化
- Note taken on [2022-12-13 Tue 20:18] \\
  如果构造器的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)
1) 通过Class类的getDeclaredConstructor(Class ... parameterTypes)取得本类的指定形参类型的构造器
2) 向构造器的形参传递一个对象数组进去，里面包含了构造器所需的各个参数
3) 通过Constructor实例化对象
   #+begin_src java
	  Class<?> clazz=Class.forName("com.asatuoyan.Person");
	 Constructor constructor=clazz.getDeclaredConstructor(String.class,int.class);
	 System.out.println(obj);
   #+end_src
*** 反射调用方法
1. 通过Class实例获取getDelclaredMethod(Class ... parameterTypes);
2. 如果方法不可访问，设置setAccessible为true;
3. 然后通过该方法的invoke调用，向invoke中传递该方法的参数值，该方法返回值为该类中方法的返回值
#+begin_src java
  Class clazz=Person.class;
  Method showNationMehtod=clazz.getDeclaredMethod("showNation",String.classs,int.class);
  showNationMehtod.setAccessible(true);
  showNationMehtod.invoke(name,age); //返回值为该方法的返回值
#+end_src
*** 反射调用属性
*** 获取注解的信息
#+begin_src java
  Class clazz=Customer.class;
  Field nameField=clazz/getDeclaredField("name");
  nameField.getDeclaredAnntotation(); //获取的注解
#+end_src
*** 获取泛型父类信息
Type:
  1. Class
  2. ParameterizedTypel
	 - Father<String,Integer>
	 - ArrayList<String>
  3. TypeVariable
	 - T,U,E,K,V
  4. WildcardType
	 - ArraryList<>
	 - ArraryList<? super 下限>
	 - ArraryList<? extends 上限>
  5. GenericArrayType
	 - 例如 T[]
*** 获取父类的泛型实参
#+begin_src java
  //1. 先获取Class对象
  Class clazz=Son.class;
  //2. 获取泛型的父类
  /* 获取泛型父类的名 */
  Class sc=clazz.getSupperclass();
  System.out.println(sc);
  Type type=clazz.getGenericSuperclass();
  ParameterizedType pt=(ParameterizedType)type;//强转为带有参数的类型
  // 3. 获取父类泛型的实参列表
  Type[] typeArray=pt.getActualTypeArguments();
  for(Type t: typeArray){
	  System.out.println(t);
  }
#+end_src
*** 获取内部类或者外部类信息
- public Class<?>[] getClasses() 返回所有内部类和内部接口，包括超类继承的公共类和接口成员
  以及该类声明的公共类和接口成员
- public Class<?>[] getDeclaredClasses(): 返回Class对象的一个数组，这些对象表示为此
  Class对象表示的类的成员的所有类和接口，包括该类所声明的公共，保护，默认访问及私有类的接口
  但不包括继承的类和接口
- public Class<?> getDeclaringClass() 如果类是一个内部类或者一个内部接口，则返回它的
  内部类或者内部接口，否则返回null
- Class<?> getEnclosingClasses() 返回某个内部类的外部类
* JDK17上
** 重要的时间节点
|   1996 | JDK1.6 | 说明           |
|--------+--------+----------------|
|   2004 | JDK5.0 | 里程碑         |
|   2014 | JDK8.0 | LTS            |
| 2017.9 | JDK9.0 | 每半年一个版本 |
| 2018.9 | JDK11  | LTS            |
| 2021.9 | JDK17  | LTS            |
|--------+--------+----------------|
** 加载文件
1. 直接使用IO流读取
2. 调用类对象的getResourceAsStream();
3. 调用类加载器的getResourceAsStream();
4. 2,3要求被读取的文件一定要编译在.class文件中
** 关注的新特性
1. 新的语法规则
   自动装箱，自动拆箱，注解，enum,Lambda表达式，方法引用，switch表达式,try=catch变化，
   record等
2. 增加或者过时的API，删除的API
   StringBuilder ArrayList 新的日期API Optional等
3. 底层的优化，JVM参数的调整，GC的变化，内存结构(永久代--->元空间)
*** JDK8Lambda
+ 速度更快
+ 代码更少（增加了新的语法：lambda表达式）
+ 强大的Stream API
+ 最大化减少空指针异常 NullPointer
+ Nashorn引擎，允许在JVMs上允许JS应用
  JDK17使用GraalVM虚拟机
*** Lambda表达式使用
#+begin_src java
  Comparator<integar> com=Integer::compare; 
  // 语法格式二: 需要一个参数，但是没有返回值 当接口中只有一个抽象方法
  // 当有一个参数时，可以省略参数列表中的小括号
  Conusmer<String> cust= (s) -> System.out.println(s);
  cust.accept("谈一场轰轰烈烈的恋爱");
#+end_src
*** Lambda格式说明
- ->（箭头）左边 要重写的接口中的抽象方法的形参列表
- -> (箭头)右边 lambda,对应接口的实现类要重写的方法体，如果方法体只有一行执行语句，则
  一对{} 可以省略，如果有return关键字，则可以一并省略
  （O1,o2）-> {方法体} o -> 方法体
*** Lambda表达式本质
+ Lambda表达式作为接口的实现类的对象
+ lambda表达式是一个匿名函数
+ api中函数接口所在的包
*** 四大函数接口
1. Consume<T> 消费型接口 void accept(T t) 对应的抽象方法
2. Supplier<T> 供给型接口 T get()
3. Function<T,R> 函数型接口 R apply<T t>
4. Predicate<T>  判断型接口 boolean test(T t)
** Stream
