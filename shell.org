* shell中的变量
** 定义
   变量名=变量值
   unset var_name 取消设置的环境变量
*** 静态变量
    声明静态变量 readonly 变量 注意：不能unset
*** 全局变量
    export 变量名
** 常用
   $HOME 指代用户文件夹
   $PW 当前目录
   $SHELL 默认编译器
   $USER 当前用户
** 变量名称定义规则
   1) 变量名称可以由字母，数字和下划线组成，但是不能以数字开头，变量名称建议
       大写
   2) 等号两侧不能有空格
   3) 在bash中，变量默认类型都是字符串类新星，无法直接进行数值计算。
   4) 变量的值如果有空格，需要使用双引号或单引号括起来。。
* 特殊变量
** $n
  $n n为数字，$0代表脚本本身名称，$1-$9代表第1到第9个参数 十以上的参数采用
  $(10)的形式 数字代表参数的数量
** $#
   $# 功能描述，获取所有参数个数，常用于循环
** $*、$@
   $* 这个变量代表命令行中所有的参数 $* 把所有的参数看成一个整体
   $@ 这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待
** $?
   $? 判断上一条命令是否正确的执行，最后一次命令的执行的命令的返回状态。如果
      这个变量的值为0，证明上一个命令正确执行；如果这个变量值为非0（具体是哪个）
      由命令自己来决定）。则证明上一个命令执行不正确了

* 预定义变量
  $$ 当前进程的进程号PID
  $! 后台运行的最后一个进程的进程号PID
  $? 最后一次执行的命令的返回状态，如果变量的值为0，证明上一个命令正确执行，
      如果这个变量的值为非0，则则上一个命令执行不正确
* 运算符
** 基本语法
   1) $((运算式)) 或$[运算式]
   2) expr +,-,\*,/ % 加减，乘，除，取余
      expr m+n
   3) 案例 expr 2 + 3
* 条件判断
** 基本语法
   [ condition ] (注意condition前后要有空格)
   注意： 条件非空即为true [atCA]返回true []返回false
** 常用条件判断
   1) 两个整数之间的比较
      -It 小于(less than)      -le 小于等于 (less equal)
      -eq 等于 (equal)         -gt 大于 (greater than)
      -ge 大于等于 (greater equal) -ne 不等于 (Not equal)
   2) 按照文件权限进行判断
      -r 有读的权限(read) -w 有写的权限(write)
      -x 有执行的权限(execute)
   3) 按照文件类型进行判断
      -f 文件存在并且是一个常规的文件(file)
      -e 文件存在(existence) -d 文件存在并是一个目录
   4) 多条件判断(&&表示前一条执行成功时，才执行后一条命令 ||表示上一条命令执行
      失败后，才执行下一条命令)
* 流程控制
** if语句
*** 语法
   if [ condition ];then
   程序
   elif [ condition ];then
   fi
   或者
   if [ condition ]
   then
    程序
   fi
   注意事项：
   1) [ 条件判断表达式 ], 中括号和条件判断式之间必须有空格
   2) if后要有空格
*** 注意
1、[ ]表示条件测试。注意这里的空格很重要。要注意在'['后面和']'前面都必须要有空格
2、在shell中，then和fi是分开的语句。如果要在同一行里面输入，则需要用分号将他们隔开。
3、注意if判断中对于变量的处理，需要加引号，以免一些不必要的错误。没有加双引号会在一些含空格等的字符串变量判断的时候产生错误。比如[ -n "$var" ]如果var为空会出错
4、判断是不支持浮点值的
5、如果只单独使用>或者<号，系统会认为是输出或者输入重定向，虽然结果显示正确，但是其实是错误的，因此要对这些符号进行转意
6、在默认中，运行if语句中的命令所产生的错误信息仍然出现在脚本的输出结果中
7、使用-z或者-n来检查长度的时候，没有定义的变量也为0
8、空变量和没有初始化的变量可能会对shell脚本测试产生灾难性的影响，因此在不确定变量的内容的时候，在测试号前使用-n或者-z测试一下
9、? 变量包含了之前执行命令的退出状态（最近完成的前台进程）（可以用于检测退出状态）
[[https://www.cnblogs.com/kaishirenshi/p/9729800.html][if语句]]： 来源

** case语句
   case $变量名 in
   "值 1")
   如果变量的值等于值1，则执行程序 1
   ;;
   "值 2"
   如果变量的值等于值2，则执行程序 2
   ;;
   *)
   ;;
   esac
   注意事项：
   1) case行尾必须为单词“in”, 每一个模式匹配必须以右括号" ) "结束
   2) 双分号";;"表示命令序列结束。相当于java中的break
   3) 最好的"**)"表示默认模式，相当于java的default
**

** for循环
   for(( 初始值;循环控制条件;变量变化 ))
   do
      程序
   done
   语法二
   for 变量 in 值1 值2 值3...
   do
       程序
   done

** while循环
   while [ 条件判断式 ] *
   do
      程序
   done

** read读取控制台输入
   1. 基本语法
      read(选项)(参数)
      选项
      -p 指定读取值时的提示符
      -t 指定读取值时等待的时间（秒）
      参数
      变量： 指定读取值的变量名

* 函数
** 截取文件名称
   basename [string / pathname] [suffix]
   (功能描述 basename 命令会删掉所有的前缀包括最后一个"/"字符，
   然后将字符串显示出来)
   选项：
   suffix 为后缀，如果suffix被指定了,basename会将pathname或string
   中的suffix去掉
   
** 返回路径
   dirname 文件绝对路径
   （功能描述 从给定的包含绝对路径的文件名中去除文件名（非路径
   部分）），然后返回剩下的路径（目录的部分）

** 自定义函数
   [ function ] funname[()]
   {
       Action;
       [return int;]
   }
   funname
   1) 必须在调用函数地方之前，先声明函数，shell脚本是逐行运行，
      不会像其它语言一样先编译。
   2) 函数返回值，只能通过$?系统变量获得，可以显示如： return
      返回，如果不加，将以最后一条命令运行结果作为返回值。
      作为返回值，return 后跟数值n(0-255)
   3) echo 可以返回任意的字符串结果
   name(){  
     command1
     command2
     ...
     commandn
   }
   function name{command}
** 如何调用函数
   - 直接使用函数名调用，可以将其想象成Shell中的一条命令
   - 函数内部可以直接使用$1,$2...$3
   - 调用函数: function_name $1 $2
** [#C] 向函数传递参数
   #+begin_export sh
   function name
   {
       echo 函数一$1
       echo 函数二$2
   }
   name arg1 arg2
   #+end_export
* shell工具
** cut
   cut的工作就是"剪"，具体的说就是在文件中负责剪切数据用的。cut
   命令从文件中的每一行剪切字节，字符和字段并将这些字节，字符
   和字段输出
   1. 基本用法
      cut[选项参数] filename
      说明：默认分隔符是制表符
   2. 选项参数说明
      | 选项参数 | 功能                         |
      |----------+------------------------------|
      | -f       | 列号，提取第几列             |
      | -d       | 分隔符，按照指定分隔符分割列 |
      -f 3- 表示第三列之后所有
** sed
*** 介绍
   sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行
   存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的
   内容，处理完成后，把缓冲区的内容送往屏幕，接着处理下一行，
   这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用
   重定向储存输出
*** 选项参数
    sed[选项参数] 'command' filename
    | 选项参数 | 功能                                |
    | -e       | 直接在指令列模式上进行sed的动作编辑 |
*** 命令功能描述
    | 命令 | 功能描述                              |
    | a    | 新增，a的后面可以接字串，在下一行出现 |
    | d    | 删除                                  |
    | s    | 查找并替换                            |
    ‘g’ 表示global 全部替换
    sed "2a mei nv" cut.txt 在第二行添加meinv
    sed "s/le/ni/g" cut.txt 查询le 替换le
    sed -e "2d" -e "s/wo/ni/g" sed.txt
** awk
*** use
    awk[选项参数] 'pattern{action1} pattern2{action2}... filename
    pattern: 表示AWK在数据中查找的内容，就是匹配模式
    action: 在找到匹配内容时所执行的一系列命令
*** 选项参数
    | 选项参数 | 功能                 |
    | -F       | 指定输入文件拆分隔符 |
    | -v       | 赋值一个用户定义变   |
    正则匹配，匹配到符合正则表达式的内容
    awk -F : '/^root/{print $7}' ~/passwd
    - 搜索passwd文件以root关键子开头的所有行，并输出该行的第7列
    awk -F : '/^root/{print  $1" "$7}' ~/passwd
    - 输出该行的第1列和第7列
    - 只显示/etc/passwd 的第一列和第七列，以逗号分割，且在所有行前面添加列名user,
      shell在最后一行添加"dahaige,/bin/zuishuai
      awk -F : 'BEGIN{print "user,shell"} {print $1","$7} END{print "dahaige,bin/zuishuai"}' ~/passwd
    - 将passwd文件中的用户id增加数值1并输出
      awk -F : -v i=0 '{print $3+i}' ~/passwd
    - 浏览记录的域的个数（切割后，列的个数）
      awk -F : '{print "filename:" FILENAME ",linenumber:" NR ",column:" NF}'
      ~/passwd
    - 切割ip
      ifconfig wlp3s0 | grep "inet " | awk -F " " '{print $2}'
    - 查询cut.txt中空行所在行号
*** awk的内置变量
    | 变量     | 说明                                   |
    | FILENMAE | 文件名                                 |
    | NR       | 已读的记录数                           |
    | NF       | 浏览记录的域的个数（切割后，列的个数） |
* 正则表达式
** \
   将下一字符标记为特殊字符，文本，反向引用或八进制转义符。例如，“n”匹配字符
   "n", "\n"匹配换行符，序列"\\\" 则匹配 "\", "\\(" 匹配 "("
** ^
   匹配输入字符串开始的位置，如果设置了RegExp对象的Multiline属性，^ 还会与
   "\n"或"\r"之后的位置匹配
** $
   匹配输入字符结尾的位置，如果设置了regexp对象的Multiline属性，$还会与"\n"
   或"\r"之前的位置匹配
** *
   零次或者多次匹配前面的字符或子表达式，例如，zo* 匹配"z"和"zoo". *等效于
  {0,}
** +
   一次或多次匹配前面的字符或子表达式，例如，"zo+"与"zo"和"zoo"匹配，但与
   "z"不匹配，等效与{1,}
* sort
  sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出
** 基本语法
   sort(选项)（参数）
   | 选项 | 说明                     |
   | -n   | 依数值的大小排序         |
   | -r   | 以相反的顺序来排序       |
   | -t   | 设置排序时所用的分隔字符 |
   | -k   | 指定需要排序的列         |
   参数： 指定待排序的列表
* 学习目标
  1. 基本监控系统脚本编写(cpu,内存，IO等)
  2. 后台服务监控，启动，停止脚本，数据备份脚本
  3. 利用grep.sed,和awk的复杂用法处理脚本
  4. 功能函数编写，主流程设计
  5. 具备复杂功能的大型脚本工
     
* 变量的高级用法
** 变量替换
   | 语法                         | 说明                                                 |
   | ${变量名#匹配规则}           | 从变量开头进行规则匹配，将符号最短的数据删除         |
   | ${变量名##匹配规则}          | 从变量开头进行规则匹配，将符合最长的数据删除         |
   | ${变量名%匹配规则}           | 从变量尾部进行规则匹配，将符合最短的数据删除         |
   | ${变量名%%匹配规则}          | 从变量的尾部进行规则匹配，将符号最长的数据删除       |
   | ${变量名/旧字符串/新字符串}  | 变量名符合旧字符串，则第一个旧字符串会被新字符串取代 |
   | ${变量名//旧字符串/新字符串} | 变量内容符合旧字符串,则全部旧字符串会被新字符串取代  |
** 变量测试
   | 变量配置方式      | str没有配置 | Str为空字符串 | Str已配置且非空 |
   | var=${str-expr}   | var=expr    | var=          | var=$str        |
   | var=${str:-expr]} | var=expr    | var=expr      | var=$str        |
   | var=${str+expr}   | var=        | var=expr      | var=expr        |
   | var=${str:+expr}  | var=        | var=          | var=expr        |
   | var=${str=expr}   | var=expr    | var=          | var=$str        |
   | var={str:=expr}   | var=expr    | var=expr      | var=$str        |
** 全局变量和局部变量
   1. 全局变量
      - 不做特殊声明，shell的变量都是全局变量
      - Tips: 大型脚本函数谨慎使用全局变量
   2. 局部变量
      - 定义变量，使用local关键字
      - 就近原则：函数内和函数外存在同名变量，则函数内变量覆盖函数外变量
   注意： shell中的局部变量一旦被调用，就会变成全局变量，在任意地点都可以
   使用。使用local关键字来定义局部变量,这样它就会成为一个临时变量
* 字符串的处理
** 计算字符串长度
   |        | 语法                 | 说明                         |
   | 方法一 | ${#string}           | 无                           |
   | 方法二 | expr length "string" | string有空格，则必须加双引号 |
   注意： 方法二中string如果中间有空格则必须加双引号
   注意：方法二在debian中不工作
         var =`expr length "string"`(此处为顿号)
** 获取子串在字符串中的索引位置
   expr index $string char
   - 寻找字符索引 
   expr match $string substr
   - 获取字串长度
   - 此时子串必须从头开始匹配，否则匹配不到
** 抽取子串
   |        | 语法                                  | 说明                             |
   | 方法一 | ${string:position}                    | 从string中的position开始         |
   | 方法二 | ${string:position:length}             | 从position开始，匹配长度为length |
   | 方法三 | ${string: (必须加空格)-position}           | 从右边开始匹配                   |
   | 方法四 | ${string:(position0}                  | 从左边开始匹配                   |
   | 方法五 | expr substr $string $position $length | 从position开始，匹配长度为length |
   方法一： 索引下标从0开始
   方法五： 索引位置从1开始计算
* 命令替换
** 语法 
   |          | 语法格式   |
   | 方法命令 | command    |
   | 方法二   | $(command) |
   注意： $() 表示命令替换
          $(()) 表示算术运算
   shell语法并不严格
   ((num++))       
* Bash数学运算(expr)
** 语法格式
   |        | 语法                      |
   | 方法一 | expr $num1 operator $num2 |
   | 方法二 | $(($num1 operator $num2)) |
** expr操作符对照表(上)
   |------------------+------------------------------------------|
   | 操作符           | 含义                                     |
   | num1 \! num2  | num1不为空，且非0，返回num1 否则返回num2 |
   | num1 & num2      | num1不为空，且非0, 返回num1. 否则返回0   |
   | num1 <num2       | num1小于num2, 返回1; 否则返回0           |
   | num<= num2       | num1小于等于num2,返回1, 否则返回0        |
   | num1=num2        | num1等于num2,返回1;否则返回0             |
   | num1 !=num2      | num1不等于num2,返回1，否则返回0          |
   | num1 >num2       | num1大于num2,返回1;否则返回0             |
   | num1>=num2       | num1大于等于num2,返回1;否则返回0         |
   |------------------+------------------------------------------|
   注意：比较大小的操作全都有进行转义，尽量使用shell             
** bc浮点数运算
   * bc是bash内建的运算器，支持浮点数运算
   * 内建变量scale可以设置，默认为0
   * num1 ^ num2 指数运算
     scale=2 则设置为保留2位小数
     #+begin_src shell :results output :eval yes 
       #!bin/bash
       read -p "num1: " num1
       read -p "num2: " num2
       echo "scale=4;$num1+$num2" | bc
     #+end_src       
* 库文件
  1. 库文件名的后缀是任意的，但一般使用lib
  2. 库文件没有可执行权限
  3. 库文件无须和脚本放在同级目录，只需要在脚本引用时指定
  4. 第一行一般使用#!/bin/echo, 输出警告信息，避免用户执行
* 脚本编写的思路分析
  #变量string="Bigdata process framework is Hadoop.Hadoop is an open source project"                                                                       
  执行脚本后，打印输出string字符串变量，并且给用户以下选项                                                                                            
   1. 打印string长度                                                                                                                                         
   2. 删除字符串中所有的hadoop,                                                                                                                              
   3. 替换第一个Hadoop为Mapreduce                                                                                                                       
   4. 替换全部的Hadoop为Mapreduce                                                                                                                              
   用户输入数字1|2|3|4 可以执行对应项的功能，输入q|Q则退出交互模式 
  1. 抽取不同的功能模块来编写函数
     - function print_tips 提示信息菜单
     - function len_of_string 打印字符串的长度
     - function del_hadoop 
     - function rel_hadoop_mapreduce_first
     - function rep_hadoop_mapreduce_all
  2. 编写函数
  3. 设计主程序流程 
* 文件查找命令的高级用法
** find
** grep
** which
* 文本处理
** grep 文本过滤器
** sed 文本编辑器
** awk 报告生成器
   :LOGBOOK:
   CLOCK: [2021-11-09 Tue 01:23]
   :END:
* shell中的数组
** 实例
   shell数组下标从0开始，awk中从1开始
   shell 中删除数组元素后，其余数组的下标不变
   #+begin_src bash
     array=("Allen" "Mike" "Messi" "Jerry" "Hanmeimei" "Wang")
     echo ${array[2]}
     #打印元素
     echo ${#array[0]}
     #打印元素个数
     echo ${#array[3]} #数据中的元素的长度
     #给元素赋值
     array[3]="li"
     #删除元素
     unset array[2];unset array
     #分片访问 从1开始,访问三个元素
     echo ${arrary[@]:1:3}
     #元素内容切换
     ${array[@]/e/E} #只替换第一个e
     ${array[@]//e/E} #替换所有e
     #数组的遍历
     for a in array
     do
	 echo $a
     done
#+end_src
* 功能函数列表
  1. function get_all_process 返回进程名称列表字符串
     #+begin_src bash
       #!/bin/bash
       # Func: Get Porcess Status In process.cfg
       #Define Variables
       HOME_DIR="~/bin/exer/finish"
       CONFIG_FILE="process.cfg"

       get_all_group(){
           if [ -e $HOME_DIR/$CONFIG_FILE ];then
               echo "$CONFIG_FILE is not exist..Please check.."
               exit
           else
               G_LIST=`sed -n '/\[GROUP_LIST\]/,/\[.*]/p' process.cfg | egrep -v "^$" | grep -v "\[.*\]"`
               #sed -n '/\[GROUP_LIST\]/,/\[.*]/p' process.cfg | egrep -v "(^$|\[.*\])" egrep 写法
               echo "$G_LIST"
           fi
       }

       groups=`get_all_group`

       for g in $groups
       do
                    echo $g
       done

     #+end_src
  2. function get_all_group 返回进程组列表字符串
     #+begin_src bash
       #得到进程列表
       get_all_process(){

        for g in `get_all_group`
        do
            F_LIST=`sed -n "/\[$g\]/,/\[/p" $HOME_DIR/$CONFIG_FILE | egrep -v "(^$|\[.*\])"`
            echo $F_LIST
        done
       }
     #+end_src
  3. function get_process_info 返回进程详细信息列表字符串，详细信息包括:
     运行状态,PID,CPU,MEM,启动时间 [fn:1]
     1. function get_process_pid_by_name process_name
     2. function get_process_info_by_pid process_pid
  4. function get_process_by_group 返回进程组内的所有进程名称列表字符串
     例子: DB组--> "mysql postgresql oracle"
* Footnotes
[fn:1] 该函数可以接收一个参数，参数为进程名 
