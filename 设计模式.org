#+TITLE:设计模式 
#+AUTHOR: akinjoker
#+email: asatuoyan@gamil.com
#+INFOJS_OPT: 
#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes 
-----
* 内容介绍
** 概述
1. 设计模式的核心思想
2. 能够以类图说明设计原则
   - 单一职责
   - 接口隔离
   - 依赖倒转
   - 里氏替换
   - 开闭原则 ocp
   - 迪木特原则
   - 合成复用原则
3. 在项目开发中，哪里用到了ocp原则
** 重要
1. 对软件工程中普遍存在的各种问题，所选出的解决方案
2. 使用设计模式让软件的扩展性和维护性更好,灵活性
   可读性，可靠性。使得程序高内聚，低耦合
3. 代码重用性，相同功能的代码，不用多次编写
4. 可读性，编程的规范性，便于其他程序员的阅读和理解
5. 扩展性，增加新的功能时，成本低，非常方便（可维护性）
6. 可靠性，当我们增加新的功能后，对原来的功能没有影响
7. 设计模式包含了面向对象的精髓，面向对象的分析和设计
* 设计原则介绍
** 单一职责原则(Single Responsibility)
*** 基本介绍
对类来说，即一个类应该只负责一项职责，如类A负责两个不同的职责，那么
当一个职责的需求变更而改变A时，可能造成职责2执行错误，所以需要将
类A的颗粒度分解为A1,A2
*** 核心思想
1. 降低类的复杂度，一个类一个职责
2. 降低变更带来的风险
3. 通常应该遵守，只有逻辑足够简单，或者类的方法足够少，才可以在方法
   级别保持单一职责原则
** 接口隔离原则(Interface Segregation Principle)
*** 介绍
1） 客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立
在最小的接口上
1) 即A类通过使用接口作为形参来间接依赖另一个类，此时这个方法只会用到接口实现中的
   部分方法
2) 可以将每个方法都写一个接口，当使用接口时。接口的实现类只需要实现需要使用的方法即可
** 依赖性倒转原则(Dependence inversion Principle)
1) 高层模块不应该依赖底层模块，二者都应该依赖其抽象
2) 抽象不应该依赖细节，细节依赖依赖抽象
3) 依赖倒转原则是基于的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建
   的架构比以细节为基础的架构要稳定的多，在Java中，抽象指的是接口或抽象类，细节指的是具体的
   实现类
4) 使用接口或者抽象类的目的是设计好规范，而不涉及任何具体的操作，把展示细节的认为交给它们的实现
   类进行
5) 依赖倒转的中心思想是面向接口编程
** 里式替换原则
*** 继承的问题
1) 继承包含这样一层含义，基类中凡是已经实现好的方法，实际上是在设定规范
   和契约，虽然它不强制要求所有子类必须遵循这些契约，但是如果子类对已经
   实现的方法任意修改，就会对整个继承体系造成破坏
2) 继承在给程序设计便利的同时，也带来了弊端，比如继承会给程序带来
   侵入性，程序的可移植性降低，增加对象间的耦合。如果一个类被其它
   类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类
   修改后，所有涉及到子类的功能都可能出现故障
3) 在编程时，如何正确使用继承?
   里式替换原则
*** 概述
1) Liskov Substitution Principle 姓里的女士提出的
2) 如果每个类型为T1的对象o1,都有类型为T2的对象o2，使得t1定义的所有
   对象o1在替换成o2时，程序P的行为都没有变化，那么类型T2是类型T1
   的子类型，所有引用的基类的地方必须能够透明的使用其子类对象
3) 在使用继承时，尽量不要重写其父类方法
4) 继承让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖
   来解决问题
** 开闭原则
*** 概述
1) 开闭原则（Open Closed Principle）是编程中最基础，最重要的设计
   原则
2) 一个软件实体如类，模块和函数应该对扩展开放，对修改关闭(使用方关闭)
   ，用抽象构建框架，用实现扩展细节。
3) 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过
   修改已有代码来实现变化
4) 编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则
** 迪米特法则
*** 基本介绍
1) 一个对象应该对其他对象保持最少的了解
2) 类与类的关系越密切，耦合度越大
3) 迪米特法则（Demeter Principle）又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也
   就是说，对于被依赖的类不管多么复杂，都应该将逻辑封装在类的内部，对外除了提供public方法，
   不对外泄露信息
4) 只与直接的朋友通信
5) 直接朋友： 每个对象都会与其它对象由耦合关系，只要两个对象有耦合关系，我们就说两个对象之间
   是朋友关系。耦合的方式很多，依赖关联，组合，聚合等。其中，我们称出现的成员变量，方法参数，
   方法的返回值中的类为直接的朋友，而且现在局部变量中的类不是直接的朋友。陌生的类最好不要
   以局部变量的形式出现在类的内部
** 合成复用原则（Composite Reuse Principle）
*** 基本介绍
原则尽量使用合成/聚合的方式，而不是使用继承。
** 设计原则的核心思想
1) 找出应用中的变化之出，独立它们，不要和那些不需要变化的代码混合
   在一起。
2) 针对接口编程，而不是针对实现编程
3) 为了交互对象之间的松耦合而努力
* UML类图(Unified modeling language UML)
** 基本介绍
1） 是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员
进行思考和记录思路的结果
1) UML本身是一套符号的规定，就像数学符号和化学符号一样。这些符号
   用于描述软件模型中的各个元素和它们之间的关系，比如类，接口，
   实现，泛化，依赖组合，聚合等。
2) 使用UML来建模，常用工具有Rational Rose，也可以使用一些插件来
   建模
** 术语
1. Note 对你的UML图进行注释
2. Class表示类，可以添加属性和方法
3. 表示接口 Interface
4. 表示类之间的关系 Relation
   - Dependency 依赖 如果A类中使用了B类
     1. 类的成员属性
     2. 方法的返回值
     3. 方法接收到的参数类型
     4. 方法中使用
   - Association 关联
     - 关联关系是依赖的特例
     - 关联关系具有多重性，一对一 一对多 多对多
   - Generalization 泛化
     - 如果A类继承了B类，A和B存在泛化关系
   - Realization 实现
   - Aggregation 聚合
     类与类之间的关系是否可以分开，可以分开叫聚合，人和身份证
   - Composite 组合
     类与类之间的关系不能分开，叫做组合,比如人和人头的关系
* 设计模式概述
** 设计模式介绍
1) 模式不是代码，而是问题的解决方案
2) 本质提高软件的维护性，通用性
3) 设计模式类型
   1) 创建型模式： 单例模式，抽象工厂模式，原型模式，建造者模式，工厂模式
   2) 结构模式： 适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式
   3) 行为型模式：模板方法模式，命令模式，访问者模式，迭代器模式，观察者模式，中介者模式，
      备忘录模式，解释器模式，状态模式，策略模式，职责链模式
* 单例模式
** 饿汉式（静态常量）
*** 例子
#+begin_src java
  class Singleton{
      private Singleton(){
      }
      private final static singleton instance=new Singleton();
      public Singleton getInstance(){
          return instance;
      }
  }
#+end_src
*** 缺点
1. 可用，造成内存浪费
2. 虽然避免了线程同步，但是导致类加载的原因很多，不能确定有其它方式导致类加载。初始化instance
   就没有达到lazy loading效果
** 饿汉式（静态代码快）
*** 例子
#+begin_src java
  class Singleton{
      private Singleton(){}
      private static Singleton instance;
      static{
          instance=new Singleton();
      }
      public static Singleton getInstance(){
          return instace;
      }
  }
#+end_src
** 懒汉式（线程不安全）
*** 例子
#+begin_src java
  class Singleton{
      private Singleton(){}
      private static Singleton instance;
      public static Singleton getInstance(){
          if(instance==null){
              instance=new Singleton();
          }
          return instance;
      }
  }
#+end_src
** 懒汉式（线程安全，同步方法）
*** 列子
#+begin_src java
  class Singleton{
      private static Singleton instance;
      private Single(){}
      public static synchronized Singleton getInstance(){
          if(instance ==null){
              instance =new Singleton();
          }
          return instance;
      }
  }
#+end_src
*** 优缺点
1) 解决了线程安全问题
2) 效率太低，每个线程获取实例时候，执行getInstance()都要进行同步，
   而其实一次实例化代码就够了，后面想要获得该类实例，直接进行return,
   方法进行同步的效率太低
** 懒汉式（线程安全，同步代码块）
#+begin_src java
  class Singleton{
      private static Singleton instance;
      private Singleton(){}
      public Singleton getInstance(){
          if(instance ==null){
              synchronized (Singleton.class){
                  instance=new Singleton();
              }
          }
          return instance;
      }
  }
#+end_src
** 双重检查
*** 例子
#+begin_src java
  class Singleton{
      private static Singleton instance;
      public static Singleton getInstance(){
             if(instance ==null){
                 synchronized (Singleton.class){
                     if(instance==null){
                         instance=new Singleton();
                     }
                 }
             }
             return instance;
        }
      }
#+end_src
*** 优缺点
1) Double-Check概念是多线程开发时用到的，我们进行了两次(singleton
   ==null)检查，这样就可以保证线程安全了
2) 实例化对象只用执行一次，
3) 有指令重排问题，需要volatile关键字，避免指令重排
   mem=allocate() 为单列对象分配内存空间
   instance=mem;引用非空，但是没有初始化，
   ctorSingleton(instance)为单列对象通过instance构造函数
*** 指令重排
1. 当java在创建一个对象时
   - 首先会分配对象的内存空间 memory=allocate();
   - 初始化对象 ctorInstance(memory)
   - 设置instance指向刚分配的内存地址
     instance=memory;
2. 上述步骤在第二步和第三步，可能会在编译器中进行优化，而改变程序
   执行的顺序，重新排序之后，先为对象分配内存地址。在单线程之下，
   不会对代码的执行产生影响
3. 表格模拟2个线程创建单例
   来源： [[https://www.cnblogs.com/lkxsnow/p/12293791.html#:~:text=%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%BA%8F%E6%98%AF%E6%8C%87%E7%BC%96,%E6%95%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E3%80%82][指令重排介绍]]
| 时间 | 线程A                       | 线程B                                                 |
| t1   | A1:分配对象内存空间         |                                                       |
| t2   | A3:设置instance指向内存空间 |                                                       |
| t3   |                             | B1:判断instance是否为空                               |
| t4   |                             | B2:由于instance不为null,线程B将访问instance引用的对象 |
| t5   | A2:初始化对象               |                                                       |
| t6   | A4:访问instance引用的对象          |                                                       |
** 静态内部类
*** 例子
#+begin_src java
  public class LazySingle{
      private LazySingle(){}
      public static LazySingle getInstance(){
          return Inner.INSTANCE;
      }
      private static class Inner{
          static LazySingle INSTANCE=new LazySingle();
      }
  }
#+end_src
*** 好处
1. 只有在外部类调用时才加载，产生实例，又不用加锁。
2. JVM保证了线程的安全性（虽然不绝对）
** 枚举
*** 例子
#+begin_src java
  enum Singleton{
      INSTANCE;
      public void sayOK(){
          System.out.println("ok~");
      }
  }
#+end_src
*** 优点
1. 使用枚举来实现单例模式，不仅有效避免线程同步，而且能防止反序列
   化重新创建新的对象
2. 是Effective Java作者Josh Bloch提倡的方法
* 工厂模式
** 需求
1) 批萨的项目，要便于批萨种类的扩展，要便于维护
2) 批萨种类多 GreekPizz CheesePizz 等
3) 批萨的制作prepare bake cut box
4) 完成批萨店订购功能
** 分类
1. 简单工厂
2. 工厂模式
3. 静态工厂模式
* 建造者模式
** 基本介绍
1. 将复杂对象的建造过程抽象出来，可以构造出不同属性的对象
2. 一步一步构建一个复杂的对象，只通过复杂对象的类型和内容就可以构造它们
** 建造者模式的四个角色
1. Product 一个具体的产品抽象
2. Builder 创建一个Product对象的各个部件指定接口/抽象类
3. ConcreteBuilder 实现接口，构建和装配各个部件
4. Director(指挥者) 构建一个使用Builder接口的对象，它主要用于一个创建复杂的对象。两个作用，隔离了客户和对象的生成过程。二，负责控制产品对象的生产过程
** 类图
#+begin_src plantuml :file builder.png
  class HouseDirector{
     houseBuilder HouseBuilder
  }
  class Client
  class CommonHouse
  class highBuilding
  class OtherHouse
  class House
  note top of House: 产品
  class HouseBuilder{
     house: House
     buildBasic(): void
     buildWalls(): void
     roffed(): void
     build(): House
  }
  HouseBuilder *-- House
  HouseDirector o-- HouseBuilder
  HouseBuilder <|-- CommonHouse
  HouseBuilder <|-- OtherHouse
  HouseBuilder <|-- highBuilding
  Client --> HouseDirector
  Client --> CommonHouse
  Client --> highBuilding
  Client --> OtherHouse
#+end_src

#+RESULTS:
[[file:builder.png]]
* 适配器模式
** 问题 
1) 将某个类的接口转换成客户端期望的另一个接口，
主要目的是兼容，让原本不匹配不能一起工作两个类可以协同工作，其名为包装类(Wrapper)
1) 适配器模式属于结构型模式
2) 主要分为 类适配器 对象适配器 接口适配器
3) 用户调用适配器转换以后的目标接口方法，适配器再被调用被适配相关接口和方法
4) 用户收到反馈结果，感觉只是和目标接口交互
** 类适配器
1. Adapter类，通过继承src类，实现dst接口，完成src->dst 的适配
2. 应用实例
* 装饰者模式
** 概述
1) 动态的将新功能附加到对对象上 
* 组合模式
** 基本介绍
1) 组合模式(Composite Pattern),又叫部分整体模式，它创建了对象组的
   树形结构，将对象组合成树形结构以表示“整体-部分”的层次关系
2) 组合模式依据树形结构来组合对象，用来表示部分以整体层次
3) 这种类型的设计模式属于结构型模式
4) 组合模式使得用户对单个对象和组合对象的访问具有一致性，即，组合
   能让客户以一致的方式处理个别对象即组合对象
5) Component：这是组合中对象声明接口，在适当情况下，实现所有类
   共有的接口默认行为,用于访问和管理Component子部件
6) Leaf。在组合中表示叶子节点，叶子节点没有子节点
7) Composite:非叶子节点，用于存储子部件，在Component接口中实现
   子部件的相关操作，比如增加的方法，删除的操作
** 解决的问题
1) 组合模式解决这样的问题，当我们处理的对象可以生成一颗树形结构，
   而我们要对树上的节点和叶子节点进行操作时，它能够提供一致的方式
   而不用考虑它是节点还是叶子
* 外观模式
** 基本介绍
1) 外观模式（Facade），也叫过程模式，外观为子系统中组接口提供一个一致的界面，此模式定义一个
   高层接口，这个接口使得这一子系统更加容易使用
2) 外观模式通过定义一个一致的接口，用来屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用
3) 而无需关心这个子系统的内部细节

* UML图测试
#+begin_src plantuml :file my-diagram.png
title Authentication Sequence

Alice->Bob: Authentication Request
note right of Bob: Bob thinks about it
Bob->Alice: Authentication Response
#+end_src

#+RESULTS:
[[file:my-diagram.png]]

#+BEGIN_UML
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
#+END_UML



