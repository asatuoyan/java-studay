* 基本命令
** 关机
*** halt
    关机
*** shutdown
    -h now 立即关机
    -h 1 表示1分钟后关机
    -r now 立即重启
*** reboot
    重启系统
*** sync
    把内存的数据同步到磁盘
    -d --data 仅仅同步文档数据，没有非必要的元数据
    -f --file-system 同步带有文档的文件系统
** 关机注意事项
   当关机或者重启时，都应该使用sync指令，将内存的数据写入磁盘，防止内存中的数据
   丢失
   logout注销登录,图形界面无效 在运行级别3以下
** 用户管理
*** 基本介绍
    - Linux是一个多用户的操作系统，任何一个使用系统资源的用户，都必须首先先向系统
      申请一个帐号，都以这个帐号进入系统
    - Linux的用户需要至少要属于一个组
*** 添加用户
    useradd [选项] 用户名
    如果没有指定用户的组，那么在创建用户的同时，就会创建一个与用户同名的组
*** 指定/修改密码
   passwd 用户名
*** 删除用户
    userdel 用户名 删除用户但是保留目录
    userdel -r 用户名 删除用户以及用户主目录
*** 删除组
    指令（基本语法）
    groupadd 组名
*** 增加用户时直接加上组
    useradd -g 用户组 用户名
*** 用户和组的相关文件
    - /etc/passwd 文件
      用户(user)的配置文件，记录用户的各种信息
      每行的含义: 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录shell
    - /etc/shadow 文件
      口令的配置文件
      每行的含义:登录名:加密口令:最后一次的修改时间:最小时间间隔:最大时间间隔:
      警告时间:不活动时间:失效时间:标志
    - /etc/group
      组(group)的配置文件,记录linux包含的组的信息
      每行含义: 组名:口令:组标识号:组内用户列表
*** 移动目录
   cd （change directory）
   表示change directory 切换目录
*** 查询用户信息
   id 用户名
*** 切换用户
**** 介绍
    在操作linux,如果当前用户的权限不够，可以通过su-指令，切换到高权限用户，
    比如root
**** 基本语法
    su - 切换用户名 默认为root
**** 回退
    exit
*** 用户组
**** 介绍
     类似于角色，系统可以对有共性的多个角色进行管理
**** 基本指令
     groupadd 组名 添加组
     groupdel 组名 删除组
     usermod -g 组名 用户名 更换用户组
** 指定运行级别
   0： 关机
   1:  单用户 (找回丢失的密码)
   2:  多用户无网络服务
   3:  多用户有网络服务
   4:  保留
   5:  图形界面
   6:  重启
   常用运行的级别是3和5，要修改默认的运行级别可改文件
   /etc/ ininttab(centos)
   init [0123456] 切换运行级别
** 操作目录
*** 创建目录
    mkdir 选项 目录名
     - p 创建多级目录
     - v --verbose 打印创建出目录的信息
     - Z 为每个创建的目录设置安全加固的Linux安全环境 为默认类型
*** rmdir
    rmdir 选项 要删除的目录名
    -p --parents 移除该目录的和它的子代
** 文件
*** 创建文件
    touch 文件名
** 拷贝文件到指定目录
   cp 选项 source dest(目标)
   -r 递归复制整个文件夹
   (反斜杠)/cp -r test+斜杠/ zwj（斜杠）  （注意斜杠为/）
** 帮助指令
   man (command or config-file)
   help command (获得shell内置命令的帮助信息
   ifconfig
** 目录的显示，切换
   pwd
   显示当前工作目录的绝对路径
   ls 选项 [目录或者文件
   cd ~ 或者 cd 回到当前用户的home目录下
   cd .. 回到当前目录的上一级目录
** 删除
   rm 选项 删除的文件或目录
   -r 递归删除整个文件夹
   -f 强制删除不提示
** mv 移动
   mv oldNameFile newNameFile 重命名
   mv /path/oldnamefile /path2/newnamefile
** 显示和输出
*** cat 查看
    cat 查看文件内容
    cat 选项 要查看的文件
    - n 显示行号
*** more
    分页显示
    基于vi编辑器的文本过滤器，它以全屏幕的方式按分页显示文本文件的内容，
    more指令中内置了若干快捷键，
    more dest-file
    -f --logical 计算超出的屏幕的行
    +<number> 从行号（number）开始显示行
    翻一页 space按键
    一行 enter按键
    C-b 上一页 C-f 下一页
*** less 分屏查看
    less指令用来分屏查看文件内容，它的内容与more指令类似,但是比more指令更加
    强大，支持各种显示终端，less指令在显示文件内容时，并不是一次将整个文件
    加载之后才显示，而是根据需要加载内容，对于显示大型文件具有较高的效率
    space key 向下翻页
    pagedown 向下翻页
    pageup 向上翻页
    /String 向下搜寻字串的功能，n: 向下查找 N:向上查找
    ?String 向上搜寻字串的功能  n: 向上查找 N:向下查找
    q 离开这个文本
*** 重定向和追加
    > 输出重定向和>>追加
    ls -l>文件  列表的内容写入a.txt（覆盖）
    ls -al>>文件  列表的内容追加到文件的末尾
    cat file1>file2 将file1的内容覆盖到file2
    echo "内容">>文件 将文件1的内容覆盖到文件2
    >> 不会覆盖原来文件的内容
*** echo 输出内容
    echo输出内容到控制台
    echo 选项 输出内容
*** head 显示开头
    head file  查看文件头10行内容
    head -n 5 file 查看文件头5行的内容，5可以是任意行数
*** tail 显示末尾
    tail file 查看文件后10行内容
    tail -n 5 file 查看文件后5行内容，5可以是任意行数
    tail -f file 实时追踪该文档的所有更新
** 软链接
   软链接也叫符号链接，类似于windows里的快捷方式,主要存放了链接其它文件的路径
   ln -s 原文件或目录 软链接名 给原文件创建一个软链接
** 日期
*** history
   history 查看已经执行过历史命令
   执行历史指令 !178 执行历史编号为178的指令
*** date 日期
   date 显示当前时间
   date+%Y 显示当前年份
   date+%m 显示当前月份
   date+%d 显示当前是哪一天
   date "+%Y-%m-%d %H:%M:%S" 显示年月日时分秒
   date =s "2018-10-10 11:22:22"
*** cal 日历
   查看日历指令
   cal 选项  不加选项，显示本月日历
*** find 搜索
** 搜索查找类
*** find
    find指令将从指定目录向下递归地遍历各个子目录,将满足条件的文件或者目录显示在
    终端
    find 搜索范围 选项
    | 选项            | 功能                               |
    | -name<查询方式> | 按照所指定的文件名查找模式查找文件 |
    | -user<用户名>   | 查找属于指定用户名所有文件         |
    | -size<文件大小> | 按照指定文件的大小查找文件         |
    K kb  M mb  G gb
*** locate
    locate指令可以快速定位文件路径，locate指令利用事先建立的系统中所有文件名称
    及路径的locate数据库实现快速定位给定的文件，locate无须遍历整个文件系统，查询
    速度较快，为了保证查询结果的准确度，管理必须定期更新locate时刻
    - locate 搜索文件
      由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb
      指令创建locate数据库
** 文件过滤
*** grep 和 管道指令
    grep 过滤查找，管道符 "|",表示前一个命令的处理结果输出传递给后面的命令处理
    grep 选项 查找内容 源文件
    -n 显示匹配行及行号
    -i 忽略字母大小写
** 压缩和解压类
*** gzip/gunzip
    gzip用于压缩文件，gunzip用于解压的
    gzip file  压缩文件，只能将文件压缩为*.gz文件
    gunzip file.gz  解压缩文件命令
    当使用gzip对文件进行压缩后，不会保留原来的文件
*** zip/unzip
    zip用于压缩文件,unzip用于解压的，
    zip 选项 xxx.zip 将要压缩的内容（压缩文件和目录的命令）
    unzip 选项 xxx.zip 解压缩文件
    zip常用选项
    -r 递归压缩
    zip -r 压缩的文件  要压缩的目录
    unzip的常用选项
    -d <目录> 指定解压后文件的存放目录
*** tar
    tar指令是打包指令,最后打包后的文件是.tar.gz文件
    tar 选项 xxx.tar.gz 打包的内容
    打包目录，压缩的文件格式
    -c 产生.tar打包文件
    -v 显示详细信息
    -f 指定压缩后的文件
    -z 打包同时压缩
    -x 解包.tar文件
    tar -zcvf a.tar.gz a.txt a2.txt
    tar -zxvf myhome.tar.gz -C /opt
* 用户命令的执行
** 过程
   1. 判断用户执行命令的路径
   2. Linux系统检查用户输入的命令是否为"alias"
   3. bash解释器判断用户输入的是内部命令还是外部命令
   4. 内部命令是解释器内部的指令,会被直接执行。外部命令则继续处理，
      可以使用"type command" 来判断用户输入的命令是内部命令还是外部命令
   5. 系统在多个路径中查询用户输入的命令的文件。而PATH是定义这些变量的路径
      Bash解释器会在这些位置(PATH)中逐个查找。PATH是由多个路径值组成的变量
      每个路径值之间用冒号间隔。对于这些路径的增加和删除将影响到Bash解释器
      对Linux命令的查询。
* 系统使用状态
** 功能
   显示当前系统CPU，内存等系统使用情况，它同时提供一个交互的截面让用户可以观察
   系统进程情况，它可以按照CPU的使用情况，占内存大小，运行的时间，来对进程排序，
   是管理的一项必不可少的工具。
* 组管理和权限管理
** linux组的基本介绍
   linux中的每个用户必须属于一个组，不能独立于组外，在linux中每个文件所有者，
   所在组，其它组的概念
   文件
   - 所有者 一般文件的创建者即为所有者
   - 所在组
   - 其它组 （排除所在组）
   - 改变用户所在组
** 文件的所有者设置
    1) ls -ahl
    2) groupadd GroupName
    3) chgrp 修改文件所在组
** 改变用户所在组
   usermod -g 组名 用户名
   usermod -d 目录名 用户名 改变该用户登录的初始目录
** 文件权限
   -: 普通文件
   d: 目录
   l: 软链接
   c: 字符设备[键盘,鼠标]
   b: 块文件,硬盘
   -rw-r--r-- 1
   权限后的数字 如果是文件，则表示硬链接的数，如果是目录则表示该目录的子目录的
   个数
** rwx权限详解
*** 作用到文件
    1) [r]代表可读(read),可以读取，查看
    2) [w]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提
       是对该文件所在的目录有写权限，才能删除该文件
    3) [x]代表可执行(execute): 可以被执行
*** 作用到目录
    1) [r]代表可读(read): 可以读取，ls查看目录内容
    2) [w]代表可写(write): 可以修改，目录内创建+删除+重命名目录
    3) [x]代表可执行(execute): 可以进入目录
** 修改权限chmod
   chmod u:所有者 g:所有组 o:其它人 a:所有人
   1) chmod u=rwx g=rx o=x 文件目录名
   2) chmod o+w 文件目录名 向其它用户添加写权限
   3) chmod a-x 文件目录名 去除所有用的写权限
      通过数字变更权限
** 修改文件所有者
   chown newowner file 改变文件的所有者
   chown newowner:newgroup file 改变用户的所有组和所有者
   -R 如果是目录，则使其下所有子文件或目录递归生效
   usermod 修改用户及其所在组
** 文件的特殊权限
*** SUIO
    可以让二进制程序的所有者临时拥有属主的权限
*** SGID
    1. 让执行者临时拥有属组的权限(对执行权限的二进制程序进行设置)
    2. 在某个目录中创建的文件自动继承该目录的用户组
*** SBIT(保护位)
    1. 开启了SBIT特殊权限位以后，只有文件的数组才能删除文件
    2. o+t 代表了SBIT保护位的权限
** 文件的隐藏属性
*** chattr(赋予文件隐藏权限) 
    用于设置文件的隐藏权限
*** lsattr(显示文件的隐藏权限)
    1. 显示文件的隐藏权限
*** 文件访问控制列表
**** setfacl
     1. 用于管理配置文件的ACL规则
     2. 针对目录的文件使用-R参数,显示错误信息-f参数
     3. -b 参数来删除文件的ACL
     4. ll命令查看文件时，后面出现+ 号表示设置了acl权限
**** getfacl
     1. getfacl用于显示文件上设置的ACL信息
* sudo
** 功能
   1. 限制用户执行指定的命令
   2. 记录用户执行的每一条命令
   3. 配置文件(/etc/sudoers)提供集中的用户管理，权限与主机等参数
   4. 验证密码5分钟以后无须让用户验证密码
** 配置用户权限
   1. 使用whereis 查看
* 实操篇
** 任务调度
   crontab 进行定时任务的设置
   任务调度，是指系统在某个时间执行的特定命令和程序
   任务调度分类
   1. 系统工作,有些重要的工作必须周而复始的进行。如病毒扫描等
   2. 个别用户工作，个别用户可能希望执行某些程序，比如对mysql数据库的备份
      -e 编辑crontab定时任务
      -l 查询crontab任务
      -r 删除当前用户所有的crontab任务
   如果只是简单的任务，可以不用写脚本，对于比较复杂的业务，就需要写脚本
   * * * * */1 sh file.sh
     - 第一个* 一个小时当中的第几分钟 0-59
     - 第二个* 一天当真的第几小时 0-23
     - 第三个* 一个月中的第几天 1-31
     - 第四个* 一年当中的第几月 1-12
     - 第五个* 一周当中的星期几 0-7(0和7都代表星期日)
     特殊符号的说明
   * 代表任何时间.如果第一个*代表小时中的每分钟都执行一次
    ,（逗号） 代表不连续的时间，比如"0 8,12,16 * * *"代表每天8点0分，12点
    0分，16.0分都执行一次命令
     - 代表连续的时间范围 "0 5 * * 1-6" 代表在周一到周六的凌晨5点0分执行命令
     (星号)*/n 代表每隔多久执行一次。比如"*/10 * * * *" 代表每隔10分钟执行一次命令
     crontab -r 终止任务调度
     crontab -l 列出当前的任务调用
     service crontab restart
** linu重定向符号
   < : 从文件中获得输入,如mail abcd < report ,report文件作为输入，输入到mail
       命令中。
   > :  把输出送到文件中。如date>now,把当前日期和时间保存在now文件中
   >> : 附加到一个文件中。 sort < asdc >> report,使用asde文件作为sort命令的输入,
        并将结果附加到report中
** Linux的文件类型
   linux中至少8种类型，但常见的有4种
   b——块设备
   c——字符设备
   d——目录
   l——符号链接
   /dev, 目录下通常会找到块设备和字符，MODEM是字符设备，磁盘是块设备
** Linux文件系统目录
   1. /vmlinuz 这个文件是系统内核。系统启动时自动加载进内存，整个系统
      运行其上。
   2. /bin 在传统UNIX系统中，这个目录存放了使用者常用的命令，例如clear,ls,
      cp,mv,rm等等
   3. /sbin 用来存放Super User使用的系统管理程序
            
* 分区
** linux分区
   1) linux来说无论有几个分区，分给哪一目录，它归根节底就只有一个根目录，一个
      独立且唯一的文件结构，linux中每个分区都是用来组成整个文件系统的一部分
   2) linux采用了一种叫“载入”的处理方法，它的整个文件系统的一部分
   3) Linux采用了一种叫"载入"的处理方法，它的整个文件系统包含了一整套的文件和
      目录，且将一个分区和一个目录联系起来，这时载入一个分区使它的存储空间在一个
      目录下获得
** mbr
   1. 最多支持四个主分区
   2. 系统只能安装在主分区
   3. 扩展分区要占一个分区
   4. MBR最大只支持2TB，但拥有最好的兼容性
** gtb
   1. 支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）
   2. 最大支持18EB的大容量（EB=1024PB PB=1024TB）
   3. windows7 64位以后支持gtb

** 硬盘说明
   1) linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘
   2) 对于IDE硬盘，驱动器标识符为"hdx"，其中"hd"表明分区所在设备的类型，这里指
      IDE硬盘，"x"为盘号(a为基本盘，b为从属盘，c为辅助盘，d为辅助从属盘),
      “~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从S开始
      就逻辑分区，例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区。
      hdb2表示为第二个硬盘
   3) 对于SCSI硬盘则标识为"sdx~",SCSI硬盘是用"sd"来表示分区所在设备的类型的，其余则
      和IDE硬盘的表示方法一样
** 如何添加硬盘
   1. 分区 fdisk /dev/sdb
   2. 格式化 mkfs -t ext2 /dev/sdb1
   3. 挂载 mount /dev/sdb1 /home/newdisk
   4. 设置可以自动挂载（永久挂载，当你重启系统，仍然可以挂载到/home/newdisk）
   设置永久挂载
   /dev/sdb1           /home/newdisk  ext4 defaults 0 0
   mount -a
** 查询系统磁盘使用情况
   df -h
** 查询指定目录的磁盘占用情况
   du -h /目录
   -s 指定目录占用大小汇总
   -h 带计量单位
   -a 含文件
   -max-depth=1 子目录深度
   -c 列出明细的同时，增加汇总值
   wc -l 计算文件夹的个数
   ls -lR /home | grep "d" | wc -l
   递归统计~/home 文件夹下目录的个数
   tree  显示文件树

* 网络配置
** 固定ip
   linux祈祷后会自动获取IP缺点是每次自动获取的ip地址可能不一样，这个不适用于做服务器
   ，因为我们的服务器ip需要时固定的
   直接修改配置文件来指定IP，并可以连接到外网，编辑
   vi /etc/syconfig/network-scripts/ifcfg-eth0
   虚拟机中的网关和DNS都要和主机中虚拟网卡的网关保持一致
** ifcfg-eth0文件说明
   DEVICE=eth0                  #接口名（设备/网卡）
   HWADDR=00:0C:2x:6x:0x:xx     #MAC地址
   TYPE=Ethernet                #网络类型
   uuid=随机40位不重复的        #随机id
   #系统重启时的时候网络接口是否有效(yes/no)
   ONBOOT=yes
   #ip的配置方法[none|static|bootp|dhcp](引导时不使用协议|静态分配IP|BOOTP协议
   |DHCP协议)
   #ip地址
   IPADDR=192.168.184.130
   #网关
   GATEWAY=192.168.184.2
   #域名解析器
   DNS=192.168.184.2
   修改配置文件重启网络服务或者重启系统生效
* 进程管理
** 进程基本介绍
   1. 在Linux中，每个执行的程序（代码）都称为一个进程，每一个进程都分配一
      个ID号
   2. 每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程
   3. 每个进程都可以以多种方式存在。前台与后台，所谓前台进程就是用户目前的屏幕
      上可以进行操作的。后台进程则是实际在操作，但是由于屏幕上无法看到的进程，
      通常使用后台方式执行
   4. 一般系统的服务都是以后台方式存在，而且都会常驻系统中，直到关机才结束
** 显示系统执行的进程
*** 基本介绍
    ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加
    任何参数
    | 字段 | 说明                   |
    | PID  | 进程识别号             |
    | TTY  | 终端机号               |
    | TIME | 此进程所消的CPU时间    |
    | CMD  | 正在执行的命令或进程名 |
    ps -a 显示当前终端的所有进程信息
    ps -u 以用户的格式显示进程信息
    ps -x 显示后台进程运行的参数
    %MEM 占用内存
    VSZ 占用虚拟内存的情况
    RSS 使用物理内存的情况
    TTY 使用哪个终端
    STAT 代表当前进程的状态 S:休眠 r:运行
    TIME 启动时间，占用CPU的总计时间
    COMMAND 运行的命令或者进程
    ps -ef 查看当前所有进程的父进程
*** 终止进程
    kill 选项 进程号 通过进程号杀死进程
    killall 进程名称 通过进程杀死进程，也支持通配符，这在系统负荷过大变得很慢时
                     很有用
    若某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该
    进程，使用kill命令来完成此项任务
    -9 表示强迫进程立刻停止
*** 查看进程树
    pstree 选项 可以更加直观的来看进程信息
    -p 显示进程的PID
    -u 显示进程的所属用户
** 服务管理
   服务(service)本质就是进程，但是运行在后台的，通常都会监听某个端口，等待其它
   程序的请求，比如（mysql,sshd防火墙等），因此我们又称为守护进程，是Linux中
   非常重要
  指令:
   service 服务名 start | stop |restart |reload| status|
   systemctl 是在centos7.0后
   1) 关闭或者启用防火墙后，立即生效，(telnet测试，某个端口即可)
   2) 这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置
   方式1:  使用setup-> 系统服务
   方式2： /etc/init.d/服务名称
** 服务的运行级别
   查看或者修改默认级别： vi /etc/inittab
   linux系统有7种运行级别（runlevel） 常用的级别是3或者5
   0: 系统停机状态，系统默认运行级别不能设置为0，否则不能正常启动
   1: 单用户工作状态，root权限，用于系统维护，禁止远程登录
   2: 多用户状态(没有NFS)，不支持网络
   3：完全的多用户状态（有MFS），登录后进入控制台命令行模式
   4：系统未使用，保留
   5： X11控制台，登录后进入图形GUI模式
   6： 系统正常关闭并开启，默认运行级别不能设为6，否则不能正常启动
   开机->BIOS->/BOOT->INIT进程->运行级别-> 运行级别对应的服务
   /etc/init
** chkconfig
   通过chkconfig命令可以给各个运行级别设置自启动/关闭
   1) 查看服务chkconfig --list | grep xxx
   2) chkconfig 服务名 --list
   3) chkconfig --level 5 服务名 on/off
** 动态监控进程
   top与ps命令类似，它们都用来显示正在执行的进程，Top与ps最大的不同之处，在于
   top在执行一段时间可以更新正在运行的进程
   top 选项
   -d 秒数  指定top命令每隔几秒更新，默认是3秒在top命令的交互模式当真可以执行的
            命令
   -u      使top不显示任何闲置或者僵死进程
   -p      通过指定监控进程ID来仅仅监控某个进程的状态
** 监控网络状态
   netstat 选项
   -an 按一定顺序排列输出
   -p 显示哪个进程在调用
   检测主机连接命令ping
* 文件查找命令
** 命令参数与选项
   find 文件查找命令
   find 路径 选项 操作
   选项
   -name 根据文件名查找
   -perm 根据文件权限查找
   -prune 该选项可以排除某些查找目录
   -user 根据文件属主查找
   -group 根据文件属主查找
   -mtime -n | +n 根据文件更改时间查找(单位是1000ms)
   不常用
   -nogroup 查找无有效属组的文件
   -nouser 查找无有效属组的文件
   -newer file1 ! file2 查找更改时间比file1新但比file2的旧IDE文件
   -type 按照文件类型查找
   -size -n +n 按照文件大小查找
   -mindepth n 从n级目录开始搜索
   -maxdepth n 最多搜索到n级子目录
** 实例
   #+begin_src sh
     find /etc -name '*conf'
     #查找/ect目录下以conf结尾的文件
     find . -inme aa
     #查找当前目录下文件名为aa的文件，不区分大小写
     find . -user dmanr
     #查找当前目录下属主为dmanr 的文件
   #+end_src
** 类型
   -type f(类型名)
   f 文件
   d 目录
   c 字符设备文件
   b 块设备文件
    l 链接文件
   p 管道文件
   1. -nouser 查找没有属主的用户
   2. -nogroup 查找没有属组的用户
       -perm find . -type f -nogroup
   3. -prem
      find . -prem 644 查找该权限的用户
   4. -prune
      通常和-path 一起使用，用于将特定目录排除在搜索条件之外
      #+begin_src sh
	find . -path ./test -prune -o -type f
	#查找当前目录下所有的普通文件，但是排除掉test文件夹
	#-o 为或者意思
	find . -path ./exer -prune -o -path ./split -prune -o -type f
	#排除当前目录下目录名为exer 和split目录的所有文件，但是包括目录本身
      #+end_src
   5. newer file1
      例子 find /etc/ 
** 大小
   -size (不能精确查找某个大小的文件)
   -n 大小大于n的文件
   +n 大小小于n的文件
   n 等于特定大小的文件
   #+begin_src sh
     find /etc -size +10000c
     #查找该目录下小于10000字节的文件
     find /etc -size -1M
     #查找该目录下大于于1M的文件
   #+end_src
   
** 修改时间
   -mtime
   -n n天以内修改的文件
   +n n天以外修改的文件
   n 正好n天修改的文件
   #+begin_example sh
     find . -name "*09.7z" -exec rm -rf {} \;
     #删除1天以内的且后缀为7z的文件
   #+end_example
   -mmin
   -n n分钟以内修改的文件
   +n n分钟以外修改的文件
   ./test/dir_3/dir_4
   1级子目录 .
   2级子目录 test
   dir_3 3级子目录
** 对查找到的文件进行操作
   -print 打印输出
   -exec 对搜索到的文件执行特定的操作 格式为-exec 'command' {} \;
   #+begin_src sh
     find ./etc/ -type f -name "*.conf" -size +10k -exec rm -f {} \;
     #查找etc下大于10k的非目录文件并且将其删除且大于10k 然后将其删除
     find /var/log -name '*.log' -mtime +7 -exec rm -rf {} \;
     #查找var/log下以log结尾的文件，并且将大于7天的删除
     find /etc/ -type f -name "*.conf" -size +10k -exec mv {} /root/conf \;
   #+end_src
   -ok 和exec功能一样，只是每次操作都会给用户提示
** 逻辑运算符
   -a 与
   -o
   -not|! 非
   find . not -user hdfs | find . ! -user hdfs
   find . type f -a \( -user hdfs -o -name '*.xml' \)
* 常用查找命令的适用场景
** locate命令介绍
   1. 文件查找命令，所属软件包mlocate
   2. 不同于find命令是在整块磁盘中进行查找,而是在数据库文件中进行查找
   3. 系统中所有创建的文件都会被定时更新到数据库中
   4. find默认是全部匹配，locate默认是部分匹配
   5. 通过updatedb命令来及时更新数据库
   6. 用户更新/var/lib/mlocate/mlocate.db
   7. 所以使用配置文件/etc/update.db,可以通过此文件来设置
   8. 该命令在后台cron计划中定期执行
** whereis
   | 选项 | 含义               |
   | -b   | 只返回二进制文件   |
   | -m   | 只返回帮助文档文件 |
   | -s   | 只返回源代码文件   |
** which
   作用：仅仅查找二进制程序
   -b 只返回二进制文件
** 各命令使用场景推荐
   | 命令    | 运用场景                         | 优缺点                   |
   | find    | 查找某类文件，比如文件名部分     | 功能强大，速度慢         |
   | locate  | 只能查找单个文件                 | 功能单一，速度快         |
   | whereis | 查找程序的可执行文件，帮助文档等 | 不常用                   |
   | which   | 只查找程序的可执行文件           | 常用于查找文件的执行路径 |
* 文本操作
** 过滤器(grep egrep)
*** 简介
    1. grep [option] [pattern] [file1,file2..]
    2. command | grep [option] [pattern]
    注意: egrep =grep -E   
*** grep 参数
    | 选项 | 含义                                       |
    | -v   | 不示匹配行信息                             |
    | -i   | 搜索时忽大小写                             |
    | -n   | 显示行号                                   |
    | -r   | 递归搜索                                   |
    | -E   | 支持扩展则表达式                           |
    | -F   | 不按正则达式匹配，按照字符串的字面意思匹配 |
    | -c   | 只输出匹配的行数，不显示具体的内容         |
    | -w   | 匹配整词                                   |
    | -x   | 匹配整行                                   |
    | -l   | 只列出匹配的文件名，不显示具体匹配行的内容 |   
** 报告生成器（awk）
*** 定义
    awk是一个文本处理工具，通常用于处理数据并生成结果报告。
    语法格式:
    1. awk 'BEGIN{command1}pattern{command2}END{command3}' filename
       BEGIN中的command1会在正式处理文本之前就会处理
       pattern中的command2处理匹配到的命令
       在处理完最后一行指令之后，才会执行command3 
    2. standard output | awk 'BEGIN{command1}pattern{command2}END{command3}'
*** awk内置变量
    | 内置变量 | 含义                                            |
    | $0       | 整块内容                                        |
    | $1-$n    | 当前行的第1-n个字段                             |
    | NF       | 当前行的字段个数，也就是有多少列                |
    | NR       | 当前行的行号，从1开始计数                       |
    | FNR      | 多文件处理时，每个文件行号单独计数，都是从0开始 |
    | FS       | 输入字段分隔符，不指定默认以空格或tab按键分隔   |
    | RS       | 输入行分隔符，默认回车换行                      |
    | OFS      | 输出字段分隔符，默认为空格                      |
    | ORS      | 输出行分隔符。默认为回车执行                    |
    Number Field 行中字段个数
    Number Row 行的行号
    FNR File Number Row 多文件处理时，每个文件都单独记录行号
    FS Filed Separator 不指定时，默认以空格或tab键分隔
    RS Row Separator  行分隔符，不指定时以回车分隔\n
    OFS Output Filed Separator 输出字段分隔符 当输出的界面上时，字段以该分隔符分隔
    ORS Output Row Separator 输出行分隔符 
    FILENAME 处理文件的文件名
    ARGC argument command  命令行的参数个数
    ARGV 命令行参数数组
*** awk格式化输出
**** printf的格式说明符
     | 格式符 | 含义                     |
     | %s     | 打印字符串               |
     | %d     | 打印十进制数             |
     | %f     | 打印一个浮点数           |
     | %x     | 打印十六进制数           |
     | %o     | 打印八进制数             |
     | %e     | 打印数字的科学计数法形式 |
     | %c     | 打印单个字符的ASCII码    |
**** printf的修饰符
     | 修饰符 | 含义                                        |
     | -      | 左对齐                                      |
     | +      | 右对齐                                      |
     | #      | 显示在八进制前面加0，显示在十六进制前面加0x |
**** 格式化实例
     #+begin_src bash
       awk 'BEGIN{FS=":"}{printf "%s\n",$1}' /etc/passwd
       #换行输出
       awk 'BEGIN{FS=":"}{printf "%s %s\n",$1,$7}' /etc/passwd
       awk 'BEGIN{FS=":"}{printf "%20s %20s\n",$1,$7}' /etc/passwd
       #%20s 表示占位20个字符 左对齐的方式输出占位符 默认为加号，右对齐
       #%-20s 表示20个占位符，以左对齐的形式输出
     #+end_src
*** awk匹配模式的两种用法
**** RegExp
     #+begin_src bash
       awk 'BEGIN{FS=":"}/root/{print $0}' /etc/passwd
       awk 'BEGIN{FS=":"}/^yarn/{print $0}' /etc/passwd
       #找到以yarn开头的行做处理
     #+end_src
**** 关系运算匹配符匹配
     < 小于    <= 小于等于
     > 大于    >= 大于等于
     == 等于   != 不等于
     ~ 匹配正则表达式 !~ 不匹配正则表达式
     #+begin_src bash
       awk 'BEGIN{FS=":"}$3<50{print $0}' /etc/passwd
       #输出/etc/passwd中第三个字段小于50的所有信息
       awk 'BEGIN{FS=":"}$7=="/bin/bash"{print $0}' /etc/passwd
       #输出/etc/passwd中第七个字段为/bin/bash
       awk 'BEGIN{FS=":"}$3~/[0-9]{3,}/{print $0}' /etc/passwd
       awk 'BEGIN{FS=":"}$7~/\/sbin\/nologin/{print $0}' /etc/passwd
     #+end_src
**** 布尔运算符匹配
     ||    或
     &&    与
     !     非
     #+begin_src bash
       #以:为分隔符，匹配/etc/passwd 匹配文件包含的hdfs或yarn的所有行信息
       awk 'BEGIN{FS=":"}$1=="hdfs" || $1="yarn" {print $0}' /etc/passwd
     #+end_src
*** awk动作中的表达式用法
**** awk动作表达式中的算术运算符
     | 运算符 | 含义                      |
     | +      | 加                        |
     | -      | 减                        |
     | *      | 乘                        |
     | /      | 除                        |
     | %      | 取模                      |
     | ^或**  | 乘方                      |
     | ++x    | 在返回x变量之前，x变量加1 |
     | x++    | 在返回x变量之后，x变量加1 |
     #+begin_src bash
       awk 'BEGIN{var=20;var1="hello";print var,var1}' /etc/passwd
       awk 'BEGIN{var=20;var1=20;print var*var1}' /etc/passwd
       awk 'BEGIN{var=2.50;var1=2.50;printf "%0.2f\n",var*var1}' /etc/passwd #6.25
       #输出空白行
       awk '/^$/{sum=0;sum++}END{print sum}' /etc/services
       #格式化输出成绩
       awk 'BEGIN{printf "%s\t%s\t%s\t%s\t%s\t%s\n","姓名","语文","数学","英语","物理","平均分"}{total=$2+$3+$4+$5;AVG=total/4;printf "%s\t%d\t%d\t%d\t%d\t%f\n",$1,$2,$3,$4,$5,AVG}' /home/dmanr/test.txt
     #+end_src
*** awk动作中条件及循环语句
**** 条件语句
     if(条件表达式)动作1
     else if(条件表达式)动作2
     else 动作3
     #+begin_src bash
       awk 'BEGIN{FS=":"}{if($3<50) printf "%-10s\t%-5d\n","小于50的UID",$3}' /etc/passwd
       awk -f scripts.awk /etc/passwd
      #会在文档中寻找文件
     #+end_src
**** 循环语句
***** while
      while(条件表达式)
            动作
***** do while
      do
          command
      while(条件表达式)     
***** for循环:
      for(初始化计数器;计数器测试;计数器变更)
          command
***** 循环实例
      
** 流编辑器
*** sed的工作模式
    1. sed(Stream Editor), 流编辑器，对标准输出或对文件逐行进行处理
    2. 语法格式:
       stdout | sed [option] "pattern command"
       - 如果不写pattern,则会对所有行进行处理
       - 如果匹配到该行，则会用后面的操作(command)进行处理
       sed [option] "pattern command" file 
*** 选项
    默认为打印原行信息，然后再次输出
    | 选项 | 含义                               |
    | -n   | 只打印模式匹配行                   |
    | -e   | 直接在命令行进行sed编辑，默认选项  |
    | -f   | 编辑动作保存在文件中，指定文件执行 |
    | -i   | 直接修改文件内容                   |
*** pattern详解
    | 匹配模式                     | 含义                                             |
    | 10command                    | 匹配到第10行                                     |
    | 10,20command                 | 匹配从第10行开始，到第20行结束                   |
    | 10,+5command                 | 匹配从第10行开始，到第16行结束                   |
    | /pattern1/command            | 匹配到pattern1的行                               |
    | /pattern1 ,/pattern2/command | 匹配到pattern1的行的开始，到匹配pattern2的行结束 |
    | 10,/pattern1/command         | 从第10行开始，到匹配到pattern1的行结束           |
    | /pattern1/,10command         | 匹配到pattern1的行开始。到第10行匹配结束         |
    #+begin_src sh
      sed -n "17p" file
      #打印文件的第17行
      sed -n "10, 20p" file
      #从第10行开始，打印到第20行
      sed -n "5,3p" file
      #从五行开始，从了它，还会打印6,7,8三行
      sed -n '/bash/p' /etc/passwd
      sed -n '/^hsdf/p' file
      #匹配以hsdf开头的行
    #+end_src
*** 编辑命令对照表-上
    |------+-----------------------+----------------------------------------|
    | 类别 | 编辑命令              | 含义                                   |
    | 查询 | p                     | 打印                                   |
    |------+-----------------------+----------------------------------------|
    | 增加 | a                     | 行后追加                               |
    |      | i                     | 行前追加                               |
    |      | r                     | 将外部文件读入，并将其内容行后追加     |
    |      | w                     | 匹配行写入外部文件                     |
    |------+-----------------------+----------------------------------------|
    | 删除 | d                     | 删除                                   |
    |------+-----------------------+----------------------------------------|
    | 修改 | g                     | 表示行内全部匹配                       |
    |      | 2                     | 表示前两个                             |
    |      | ig                    | 表示匹配时忽略大小写                   |
    |      | s/regexp/replacement/ | 替换所有匹配的值                       |
    |      | 2g                    | 表示从第二个开始，所有符合条件的字符串 |
    |------+-----------------------+----------------------------------------|
    | 显示 | =                     | 显示行号                               |
    |------+-----------------------+----------------------------------------|
    注意:
    #+begin_src sh
      sed -i '/root/r list' passwd
      #将list文件内容追加到passwd中包含root字符的行后面
      sed -i '/\/bin\/bash/w /tmp/user_login.txt' passwd
      #将pass中可以登录的写入到临时的user_login文件中
      sed -i 's/\/bin\/bash/\/BIN\/BASH/g' passwd
      #表示查找到/bin/bash替换为/BIN/BASH
    #+end_src
*** 删除命令对照表
    | 查询命令               | 含义                                             |
    | 1d                     | 删除第一行命令                                   |
    | 1d,10d                 | 删除1行到10行内容                                |
    | 2,+5d                  | 删除1行到6行内容                                 |
    | /pattern1/d            | 删除每行中匹配到pattern1的行内容                 |
    | /pattern1/,/pattern2/d | 删除匹配到patern1的行到匹配到patern2的所有行内容 |
    | /pattern1/,10d         | 删除匹配到patern1的行到10行的所有行内容          |
    | 10,/pattern1/d         | 删除10行直到匹配到patern1的所有行内容            |
     sed -i '/[:blank:]*#/d;/^$/d' file.conf 
     去除前面有多个空格，后面加一个#的注释行和空行
     sed -i 's/^[^#]/\*&/g'
     以非#号开头的文件
*** 修改命令对照表
    | 编辑命令                        | 含义                                                         |
    | 1s/old/new                      | 替换第1行内容old为new                                        |
    | 1,10s/old/new                   | 替换1到10行的内容old为new                                    |
    | 1,+5s/old/new                   | 替换1到6行的old为new                                         |
    | /pattern1/s/old/new             | 替换匹配到pattern1的行内容old为new                           |
    | /pattern1/,/pattern2/s/old/new/ | 替换匹配到pattern1的行直到匹配到pattern2的所有行内容old为new |
    | /pattern1/,10s/old/new/         | 替换匹配到pattern1的行到10行的所有行内容old为new             |
    | 10,/pattern1/s/old/new/         | 替换第10行直到匹配到pattern1的所有行内容old为new             |
    实例:
    #+begin_src bash
      sed -i 1s/root/ROOT/ passwd
      #只是替换第一个大写的ROOT
      sed -i '5,10s/\/sbin\/nologin/\/bin\/bash/g' passwd
      #将5到10行所有sbin/nologin替换为/bin/bash
      sed -i '/\/sbin\/nologin/s/login/LOGIN/g' passwd
      #修改包含/sbin/nologin匹配到的行，将匹配到行中的login修改为大写的LOGIN

    #+end_src
*** COMMENT 总结
    追加用法总结:
    1. a 在匹配的行后面追加
    2. i 在匹配的行前面追加
    3. r 将文件内容追加到匹配行后面
    4. w 将匹配行写入指定文件
    追加用法示例详解
    #+begin_src bash
      #在pass文件第10行后追加"add Line Behind"
      sed -i '10a Add Line Behind' passwd
      #在10行到20行后追加Test Line Behind
      sed -i '10,20a Test Line Behind' passwd
      #passwd文件匹配到/bin/bash的行后追加"Insert Line For /bin/bash Behind"
      sed -i '/\/bin\/bash/a Insert Line for /bin/bash Behind' passwd
      #2. i
      #passwd匹配到以yarn 开头的行，匹配到行前面追加"Add Line Before"
      sed -i '/^yarn/i add line before' passwd
      #,passwd文件的每一行前面都追加“Insert Line Before Every Line
      sed -i 'i insert Line Before Every Line'
      #3. r
      #1 将/etc/fstab 文件中的内容追加到passwd第20行的后面
      sed -i '20r /etc/fstab' passwd
      #将/bin/bash
      sed -i '/\/bin\/bash/r /etc/inittab' passwd
      #在passwd文件中从ftp开头的行
      sed -i '/^ftp/,18r /etc/vdpau_wrapper.cfg' passwd
      #4. w
      #将passwd中匹配到/bin/bash的行追加到/tmp/sed.txt文件中
      sed-i '/\bin\/bash/w /tmp/sed.txt' passwd
    #+end_src
*** 反向引用
    &和\1     引用模式匹配到整个串
    #+begin_src sh
      sed "s/1..e/&r/g" file
      #在file中搜寻以1开头，然后跟任意两个字符，最后以e结尾的字符
      sed "s/\(1..e\)/\1r/g" file
      #同上一个命令,注意对括号进行转义
      sed -i "s/had..p/&s/g" file
      #将匹配到的字符串加上一个s
      sed -i 's/\(had\)...../\1doop/g' file.txt
      #将所有had后面有5个字符的全部换成doop
    #+end_src
    以上命令实现了同样的功能，利用&和\i匹配到整个字符串
    两者的区别是&只能匹配到的完整字符串，只能引用整个字符串。但是\1可以使用()对于ide硬盘
    匹配到一部分字符串进行操作
*** sed中引用变量时的注意事项
    1. 在匹配模式中存在变量时，建议使用双引号
    2. sed中需要引入自定义变量时，如果外面使用单引号，则自定义变量也必须使用单引号

'       
*** 练习
    #+begin_src shell
      sed -n "20p" /etc/passwd
      sed -n "8,15p" /etc/passwd
      sed -n "8,+5p" /etc/passwd
      sed -n "/^hdfs/p" /etc/passwd
      sed -n "/^root/,/^hdfs/p" /etc/passwd
      sed -n "8,/\/sbin\/nologin/p" /etc/passwd
      sed -n "\/bin\/bash,5p" /etc/passwd 
    #+end_src
*** 脚本练习
    function get_all_segement
    function count_items_in_segement
* mysql
** 用户
   grant all on school.* to dbuser@'%' identified by 'passwd';
   grant 授权
   all 所有权限 select 只能进行select权限
   % 指定网段 只有该网段才能访问
   identified by '123456';
** 如何利用shell脚本将文本中的数据导入mysql中
   $IFS 系统默认的分隔符变量 可以赋予别的值
   #+begin_src bash
     #!/bin/bash
     user="joker"
     passwd="123456"
     host="127.0.0.1"

     mysql_conn="mysql -u"$user" -p"$passwd" -h"$host""
     #read本身会处理值之间的空格等
     cat exer.txt | while read id name birth sex
     do
         $mysql_conn -e "INSERT INTO school.student1 values('$id','$name','$birth','$sex')"
     done
   #+end_src
** 备份mysql中的库或者表
*** mysqldump
    | 参数 | 选项                                              |
    | -u   | 用户名                                            |
    | -p   | 密码                                              |
    | -h   | 服务器ip地址                                      |
    | -d   | 等价于--no-data 只导出表结构                      |
    | -t   | 等价于--no-create-info 只导出数据，不导出键表语句 |
    | -A   | 等价于--all-database                              |
    | -B   | 等价于--database 导出一个 或多个数据库            |
*** 例子
    需求: 将school中的score表备份，并且将备份数据通过FTP传输到主机上的/data/backup目录下
    #+begin_src bash
      #备份数据的表
      mysqldump -ujoker -p123456 -h127.0.0.1 school score > score.sql
      #ftp传输语句
    #+end_src
*** FTP常用指令
    :open: 与ftp服务器建立链接  例子： open 192.168.184.3
    :user: 有权限登录FTP服务器的用户名和密码 例子: user ftp_user redhat(passwd)
* 实用技巧
** mail
   #+begin_src shell
     echo "context" | mail -s "subject" asatuoyan@gmail.com
     mail -s "subject" asatuoyan@gmail.com <<EOF
     hello i am a test people
     i am the only thing.
     EOF
   #+end_src
** 重置密码
   #+begin_src shell
     echo "password" | passwd --stdin root
   #+end_src
** 转义字符
   + 反斜杠(\) 使得它后面的一个字符编程单纯的字符串
   + 单引号('') 转义其中所有的变量为单纯的字符串
   + 双引号("") 保留变量属性，不做转义处理
   + 顿号(``) 将其中的命令执行并返回结果xs
* 周期性执行任务
** 一次
   - at 20:00
   - echo "command" | at 20:00
   - echo rm
** crond
   - 创建任务 crontab -e
   - 查询当前计划任务 crontab -l
   - crontab -r 删除某条计划任务
   - 系统管理员可以使用crontab 来编辑其它人的计划任务
* 存储结构
