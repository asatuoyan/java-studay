* 解决问题
** 功能问题
   java,jsp,tomcat
** 扩展性问题
   struts spring springMVC
** 解决性能问题
   NOSQL,java线程，Hadoop,Nginx,MQ,ElasticSearch
** nosql数据库
   1. 使用nosql存储用户存储，不需要Io操作
* 概述
- 开源的key-value存储系统，支持的类型包括string,list(list),set(集合),
  zet(sorted set --有序集合)和hash(哈希类型)。这些数据类型都支持push/pop,add/remove
  及取交集并集和差集及更丰富的操作，而且这些操作都是原子性。在此基础上，Redis支持各种不同
  方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别就是Redis会周期
  性的把更新的数据写入磁盘或者修改操作写入追加的记录文件。在此基础上实现了主从同步
- 配合数据库做缓存，较低IO,分布架构，做session共享
- 利用多样的数据结构存储特定的数据
  1. 最新N个数据 通过链表List实现按自然顺序排序的数据
  2. 排行榜，TopN,利用zset（有序集合）
  3. 时效性的数据，比如手机验证码 Expire过期
  4. 计数器，秒杀，原子性，自增方法INCR,DECR
  5. 去除大量数据中的重复数据 Set集合
  6. 构建队列 利用List集合
  7. 发布订阅消息系统

* 基本命令
- keys * 查询当前库的所有键
- exists <key> 判断某个键是否存在
- type <key> 查看键的类型
- del <key> 删除某个键
- expire <key> <second> 为键设置过期时间
- ttl <key> 查看还有多少秒过期 -1 表示永不过期， -2表示已过期
- dbsize 查看当前数据库key的数量
- Flushdb 清空当前数据库
- Flushall 清空所有数据库
* 五大数据类型
** String
- 基本类型，key-value
- String类型是二进制安全的，意味者Redis的String可以包含任何数据，比如jpg图片或者可以
  序列化的对象
- value可以存储最多512M
** List
- 单键多值
- Redis 列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部
  或者尾部
  - 它的底层是个双向链表，对两端的操作性很高，通过索引下标的操作中间节点性能会较差

** Set
- Redis set提供类似于list的列表功能，set可以自动排重。
- String 类型的无序集合，底层是一个value为null的hash表，所以添加，删除，查找的复杂度
  为O(1)
** zset
- 与set集合相似的地方，每个元素都关联了一个评分，这个评分都被用来按照从最低分到最高分
  的方式排列集合中的成员。集合中的成员唯一，但是score可以重复
- 可以根据score或者位置(position)来获取一个范围的元素，访问有序集合的中间元素也很快

* 基本命令
** string
  1. get <key>  查询对应d恶键值
  2. set <key> <value> 键值对
  3. append <key> <value> 将给定的值追加到原值的末尾
  4. strlen <key> 获得值的长度
  5. setnx <key> <value> 只有key不存在时，设置key的值
  6. incr <key> 将key中存储的数字值增1
     只能对数字值操作，如果为空，新增值为1
  7. decr <key> 将key中存储的数字值减1
     只能对数字值操作，如果为空，新增值为-1
  8. incrby/decrby <key> 步长
     将key中存储的数字值增减，自定义步长
  9. mset <key1> <value1> <key2> <value2> ...
     同时设置一个或多个key-value对
  10. mget <key1> <key2> <key3>
      同时获取一个或多个value
  11. msetnx <key1> <value1> <key2> <value2>
  12. getrange <key> <start> <end>
     获取值的范围，类似于java中的substring
  13. setrange <key> <start> <value>
      用<value>复写<key>所存储的字符串值，从起始位置开始
  14. setex <key> <过期时间> <value>
      设置键值的同时，设置过期时间，单位秒
  15. getset <key> <过期时间> <value>
      以旧换新，设置了新值同时获得旧值

** list
- lpush/rpush <key> <value1> <value2> <value3>...
  从左边/右边插入一个或多个值
- lpop/rpop <key>
  从左边/右边吐出多个值
   值在键在，值光键亡
- rpoplpush <key1> <key2>
   从<key1>列表右边吐出一个值，插到<key2>列表左边
- lrange <key> <start> <stop>
  按照索引下标获得元素（从左到右)
- lindex <key> <index>
  按照索引下标获得元素
- llen <key>
  获取列表长度
- linsert <key> before <value> <newvalue>
  在<value>前面插入<newvalue>插入值
- lrem<key><n><value>
  从左边删除n个value(从左到右)
** set
- sadd <key> <value1> <value2> ...
  + 将一个或多个member元素加入到集合key当中
- smembers <key>
  * 取出该集合的所有值
- sismember <key> <value>
  判断集合<Key>是否含有该<value>值，有返回1，没有0
- scard <key>
  返回该集合的元素个数
- srem <key> <value1> <value2>..
    删除集合中的某个元素
- spop <key>
  随机从该集合中吐出一个值
- srandmember <key> <n>
  随机从该集合中取出n个值
  不会从集合中删除
- sinter <key1> <key2>
  返回两个集合的交集元素
- sunion <key1< <key2>
  返回两个集合的并集元素
- sdiff <key1> <key2>
  返回两个集合的差集元素
** hash
- Redis hash 是一个键值集合
- Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象
- 类似Java里面的Map<String,String>
- hset <key> <field> <value>
  给<key>集合中的<field>键赋值<value>
- hget <key1> <key2>
  从<key1>集合<field>取出value
- hmset <key1> <field1> <value1> <field2> <value2>
  批量给key中的属性赋值
- hexists key <field>
  查看哈希表key中，给定域field是否存在
- hkeys <key>
  列出该hash集合的所有field
- hvals <key>
  列出该集合的所有value
- hincrby <Key> <field> <increment>
  为哈希表key中的域field的中奇偶加上增量increment
- hsetnx <key> <field> <value>
  将哈希表key中的域field设置为value,只有field不存在时，执行此操作
** zset
- zadd <key> <score1> <value1> <score2> <value2>
  + 将一个或者多个membera元素及其score值加入到有序集key当中
- zrange <key> <start> <stop> [WITHSCORES]
  + 返回有序集key中，下标在<start> <stop> 之间的元素
  + 带WITHSCORES,可以让分数一起和值返回到结果集
- zrangebyscore key min max [withscores] [limit offset count]
  返回有序集key中,所有score值介于min和max之间(包括等于min或max)的元素。
  有序集合按score值递增（从小到大）次序排序
- zrevrangebyscore key max min [withscores] [limit offset count]
  + 改为从大到小排序
- zincrby <key> <increment> <value>
  + 为score元素加上增量
- zren <key> <value>
  删除该集合下， 指定值的元素
- zcount <key> <min> <max>
  统计该集合，分数区间内的元素个数
- zrank <key> <value>
  返回该值在集合中的排名，从0开始
-
* Redis事务
** Multi,Exec,discard
- 从输入Multi命令开始，输入的命令都会依次进入队列中，但是不会执行
  如果在此阶段发生错误，会放弃整个队列
- 当输入Exec后，会将之前输入的命令依次执行
  此阶段发生错误，会放弃执行出错的命令
- 可以输入discard来放弃执行

** 乐观锁
1. WATCH key [key ...]
   在执行 先执行watch 可以监视一个或者多个Key，如果在事务执行之前，key的value改动，
   就会终止执行事务.
2. unwatch
   取消watch对所有key的监视
* 利用redis解决秒杀问题
 1. 利用redis list添加需要秒杀的key（商品） value(对应商品的库存)，这样当库存为消失时，key会自动销毁
 2. 当使用乐观锁，由于其属于
* Redis持久化
** 概述
- 提供了两种持久化方式
- RDB （Redis DataBase）
  在指定的时间的间隔内将内存中数据集快照写入磁盘
  Redis 单独fork一个子进程进行持久化，先将数据写入一个临时文件，待持久化进程结束了，再用临时文件替换上次持久化的文件。主进程不进行任何IO操作，确保了极高的性能需要进行大规模的数据回复。且对于数据恢复敏感性不是非常铭感，那
  RDB方式要比AOF更加高效
- AOF (append of file)
  以日志形式来记录每个写操作，将Redis执行过的所有写指令记录。只许追加文件，不可以改写
  文件，Redis启动之初就会读取文件重新构建数据，Redis重启的就会根据日志日志的内容
  将写指令从前到后执行一次以完成数据的恢复
* 主从复制
** 一主两从
- 拷贝多个redis.conf文件include
- 开启daemonize yes
- Pid文件名字pidfile
- 指定端口
  Log文件名字
- Dump.db
* Redis集群
** 问题
- 容量不够
- 并发写
** 集群概述
- 实现了redis的水平扩容，即启动了N个redis节点，将整个数据库分布存储在N个节点中，每个节点
  存储总数据的1/N
- Redis集群通过分区(partition)来提供一定程度的可用性(availability)
- 即使集群中有一部分节点失效或无法进行通讯，集群也可以继续处理命令请求
** 查询集群中的值
- CLUSTER KEYSLOT <key> 计算键key应该被放在哪个嘈
- CLUSTER COUNTKEYSINSLOT <slot> 返回槽slot目前包含的键值对数量
- CLUSTER GETKEYSINSLOT <slot> <count> 返回count个槽中的键
