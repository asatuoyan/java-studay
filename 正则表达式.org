* 正则表达式
** 正则表达式的匹配模式
   - i 执行对大小写不敏感的匹配
   - g 执行全局匹配（查找所有匹配而非找到第一个匹配后停止）
   - m 执行多行匹配
** 各种语言中使用正则
*** js
    var reg=new RegExp("a","i");
** [] 方括号
   1. var reg = new RegExp();
      - RegExp("a","i") 忽略大小写寻找字符串中的a
   2. 使用字面量来创建正则表达式
      语法: var 变量= //正则表达式// 匹配模式
      - reg=/a/i;  忽略大小写寻找字符串的a
      - reg=/a|b/  表示字符串中是否有a或b
   3. 使用字面量的方式创建正则表达式
      使用构造函数创建更加灵活
   4. []号中的内容也是或的关系
      [a-z] 表示任意小写字母
      [A-Z] 任意大写字母
      [A-z] 表示任意字母
      [ab]==a|b
      [red|blue|green] 寻找任何指定的选项
   5. [^ ] 除了
      [^ab] 字符串中是否存在除了ab以外的字符
** 转义字符和元字符
   1. .(点)表示任意字符
   2. \. 则表示单纯的点(.)
   3. \\ 表示\(斜杠)
      RegExp("\\.") 表示.(点)
   注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，
   如果要使用\则需要使用\\来代替
*** 元字符
    \w
    - 任意的字母，数字，_(下划线) [A-z0-9]
    \W
    - 除了字母、数字、_(下划线) [^A-z0-9]
    \d
    - 任意的数字[0-9]
    \D
    \s
    - 除了数字[^0-9]
    - 空格
    \S
    - 除了空格
    \b
    - 单词边界
    \B
    - 除了单词边界
*** 元字符使用范例
      //\bchild\b//
      搜索单词child
      str.replace(\\s/g,""); 去除全部的空格
      str.replace(\\s*&\s*$) 除去开头和结尾的空格
** js正则表达式中的字符串方法
   1. search
      - 只会查找第一个，即使search设置全局，也没有用
      - 搜索与正则表达式相匹配的方法
      - 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1
      - 可以接收一个正则表达式作为参数，然后根据正则表达式去检索字符串
      var rs=str.search("abc")
   2. match 找到一个或多个正则表达式的值
      - 可以根据正则表达式，从一个字符串将符合条件的内容提取出来
      - 我们可以设置正则表达式全局匹配模式，这样就会匹配所有的内容
        /[a-z]/g 搜索所有的小写字母
      - match() 会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果
   3. replace()
      - 替换与正则表达式相匹配的子串
      - 可以设置全局匹配,来替换全部
      参数:
        1. 被替换的内容,可以接受一个正则表达式作为参数
        2. 新的内容
   4. split 把字符串分割为字符数组
      - 默认全局匹配
      - 方法中可以传递正则表达式,这样方法会根据正则表达式去拆分字符串
      - str.split(",")
** 检查是否存在一个字符串
/aa/
  检查一个字符串是否存在/（斜杠）aaa/使用
  1. 量词
     - {n} 出现n次
     - {m,n} 出现m-n次
     - {m,} m次以上
  2. 通过量词可以设置一个内容出现的次数
  3. n+ n* n?
     例子: ab+c abbc abc 表示至少一个，相当于{1,}
           ab*C    表示0个或多个，有没有都可以
           ab?c 表示0个或者1个
** 检查一个字符串以a开头
   开头的(ab)   //^(ab)//
   1. ^表示开头
   结尾的ab //(ab)$//
   1. $表示结尾
   2. //^a|a$//  以a开头或者以a结尾
** 创建一个正则表达式，检查手机号
   13567890123
   1. 以1开头
   2. 第二位3-9任意数字
   3. 三位以后任意数字一共9
      //^1 [3-9] [0-9]{9}$//
** 电子邮件的正则表达式
   任意数字开头
   //^\w{3,}(\.\w+)*@[A-z0-9]+\.[A-z]{2,5}(\.[A-z]){1,2}$//
   
