* mysql命令参数详解
** 选项
   -u 用户名
   -p 用户密码
   -h 服务器ip地址
   -D 链接的数据库
   -N 不输出列信息
   -B 使用tab键代替默认交互分隔符
   -e 执行SQL语句 (必须在使用的表前面加上数据库)
   其它选项
   -E 垂直输出
   -H 以HTML格式输出
   -X 以XML格式输出
** 实例
   #+begin_src sql
     mysql -ujoker -p123456 -h127.0.0.1 -D school -e "SELECT * FROM student"
   #+end_src

* 数据库概述
** 为什么要使用数据库
   * 持久化(persistance): 将数据保存到可掉电的设备中
   * 持久化的主要作用是将内存中的数据存储在关系型数据库中, 当然也可以存储在磁盘
     文件，XML数据文件中
** 概念
   DBMS 数据库管理系统
   SQL 结构化查询语言
** RDBMS与非RDMBS区别
*** RDBMS
    1. 定义
       - 关系型数据库是把复杂的数据结构归结为二元关系
       - 关系型数据库以行(row)和列(column)的形式存储数据,以便于用户理解，这样的列表
       称为表(table)
       - 表与表之间的数据记录有关系,关系型数据库就是建立在关系模型上的数据库
       - SQL是关系型数据库的查询语言
    2. 优点
       + 复杂查询
         可以用SQL语句方便在一个表以及多个表之间做非常复杂的数据查询
       + 事务支持
         使得对于安全性能很高的数据访问要求得以实现
*** 非RDBMS
    1. 简介
       以键值对储存信息，不需要经过SQL的解析，性能很高。减少不必要的功能，进一步提高
       性能。
    2. 键值型数据库
       通过Key-Value键值的方式来存储数据. 缺点是无法使用条件过滤
    3. 文档型数据库
       此类数据库可存放并获取文档,可以是XML,JSON等格式，在数据库中文档作为处理信息
       的基本单位，一个文档相当于一条记录。mongoDB是最流行的文档型数据库
    4. 搜索引擎数据库
       采用了索引提升检索效率，但是针对全文索引效率较低，搜索引擎数据库应用于搜索
       引擎领域的数据存储形式. 以特定格式储存，检索时性能较好，核心原理：倒排索引
** 关系型数据库设计原则
   * 关系型数据库的典型数据结构就是数据表，这些表的组成都是结构化的
   * 将数据保存到表中，表再放到库中
   * 一个数据库可以有多个表，每个表都有一个名字，用来标识自己，表具有唯一性
   * 表具有一些特性，这些特性定义了数据在表中如何存储
** 表，记录，字段
   * E-R（entity-relationship）模型中的主要概念: 实体集，属性，联系集
   * 一个实体集(class)对应数据库中的一个表(table),一个实体(instance)则对应数据库
     表中的行(row),也称为一条记录(record),一个属性(attribute)则对应数据库中的
     一列。也称为一个字段
** 表与表的关联关系
   * 表与表之间的数据记录有关系，现实世界中各种实体以及实体之间的各种联系均用
     关系模型来表示
   * 四种： 一对一，一对多，多对多，自我引用
   * 两种建表原则
     * 常用一张表，不常用的一张
     * 外键唯一： 主表的主键和从表的外键，形成主外键关系，外键唯一
     * 外键是主键： 主表的主键和从表的主键，形成主外键关系
     
* DML(Data Manipulation Language,数据库操作语言)
** 简介
   1. 用于数据的添删查改以及检查数据完整性
   2. 注意关键字包括SELECT,DELETE,UPDATE,INSERT
** 数据库导入指令
   #+begin_src sql
     source ~/Documents/mysql/atguigu.sql
     -- soource后跟导入路径
     desc employees
   #+end_src
* DDL(Data Definition Language, 数据定义语言)
** 简介
   1. 定义了不同的数据库，表，视图，索引等数据库对象，还可以用来创建，
      删除，修改数据库和数据表的结构
   2. 注意关键字有CREATE,DROP,ALTER

* DCL(Data Control Language, 数据控制语言)
  1. 用于定义数据库，表，字段，用户的访问权限和安全级别
  2. 主要关键字包括GRANT,REVOKE,COMMIT,ROLLBACK,SAVEPOINT等

* 注意
** TODO DQL(数据查询语言)
*** 简介
     #+begin_src sql
       -- SELECT...
       SELECT 1; 			--没有任何子句
       -- 语法:
	  SELECT 			--标识选择的列
	  FROM            		--标识从哪个表中选择
     #+end_src
     注意： 一般情况下，除非需要使用表中的所有字段数据，最好不要使用
     通配符"*"。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的
     列数据通常会降低查询和使用的应用程序的效率。
     - 通配的符的优势是，当你不知道所使用的列的名称时，可以通过它获取他们
     - 在生产环境下，不推荐你直接使用SELECT * 进行查询
*** 列的别名
    - 重命名一个列
    - 便于计算
    - 紧跟列名，也可以在关键字和别名之间加入AS，别名使用双引号，以便
      在别名中包含空格或者特殊字符时区分大小写
    - AS可以省略
    - 建议别名简短 见名知意
*** 去重
    - 在SELECT语句中使用关键字DISTINCT去除重复行
      #+begin_src sql
	SELECT DISTINCT department_id
	FROM employees;
      #+end_src
    - 注意： DISTINCT会将后面的所有列名的组合进行去重，即两个列的
      数据相同时才会去重
*** 空值参与运算
    - 所有运算符或列值遇到null值，运算的结果都为null
    - MYSQL中空值不等于空字符串，一个空字符串的长度为0，而一个空值的
      长度是空，而且，在MYSQL中，空值是占用空间的。
    - 空值意味着未知，而非常见的
*** 着重号
    - 我们需要保证表中的字段、表名等没有和保留字、数据库
      系统或常用方法冲突。如果真的相同，请在SQL语句中使用
      一对``（着重号）引起来。
*** 查询常数
    1. 可以对常数进行查询，即可以将常数作为一列，用来作为此表的标记
       #+begin_src sql
	 SELECT 'HELLO WORLD' as corporation, last_name FROM employees
       #+end_src
*** 显示表结构
    1. 使用DESCRIBE或DESC命令，表示表结构
       DESCRIBE employees 或 DESC employees
    2. 各个字段的合义
       - Field： 字段名
       - Type: 字段类型
       - Null 表示该列是否可以存放Null值
       - Key 表示该列表是否已经编制索引，PRI表示该列是表主键的一部分;
	 UNI表示该列是UNIQUE索引的一部分;MUL表示在列中某个给定值容许出现多次
       - Default 表示该列是否有默认值，如果有，那么值是多少
       - Extra 表示可以获取与给定列有关的附加信息，列如AUTO_INCREMENT等
*** 过滤数据
    - 使用WHERE子句，将不满足条件的行过滤掉
    - WHERE子句紧跟FROM子句
** TCL(事务控制语言)
** 语言规则
   + SQL可以写在一行或者多行，为了提高可读性，各子句分行写，必要时缩进
   + 每条命令以;(分号)或\g或\G结束
   + 关键字不能被缩写也不能分行
   + 关于标点符号
     - 必须保证所有的()，单引号，双引号是成对结束的
     - 必须使用英文状态下的半角输入方式
     - 字符串和日期类型的数据可以使用单引号('')表示
     - 列的别名，尽量使用双引号("")，而且不建议省略as

** SQL大小写规范(建议遵守)
   - MYSQL在Windows环境下是大小写不敏感的
   - MYSQL在Linux环境下是大小写敏感的
     + 数据库名，表名，表的别名，变量名是严格区分大小写的
     + 关键字，函数名，列名(或字段名)，列的别名(字段的别名是忽略)大小写的
   - 推荐采用统一的书写规范:
     + 数据库名，表名，表别名，字段名，字段别名等都小写
     + SQL关键字，函数名，绑定变量等都大写

** 注释
   单行注释 #注释文字
   单行注释 -- 注释文字(-- 后面必须跟一个空格)
   多行注释 /* 注释文字 */
** 命名规则(了解)
   1. 数据库、表名不得超过30个字符，变量名限制为29个
   2. 必须只能包含 A–Z, a–z, 0–9, _共63个字符
   3. 数据库名、表名、字段名等对象名中间不要包含空格
   4. 同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名
   5. 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中
      使用`（着重号）引起来
   6. 保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据
      类型在一个表里是整数，那在另一个表里可就别变成字符型了
   7. 
