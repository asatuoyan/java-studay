
* 数据库的分类
** 解决功能性的问题
Java,Jsp,RDBMS,Tomcat,HTML,Linux,Jdbc,SVN
** 解决扩展性的问题
Struts,Spring,SpringMVC,Hibernate,Mybatis
** 解决性能的问题
NoSQL,Java线程,Hadoop,Nginx,MQ,ElasticSearch
- nginx 解决服务器进行负载均衡
* NoSQL数据库
- 不依赖业务逻辑方式进行存储，而是以简单的key-value模式存储，因此大大增加
  了数据库的扩展能力
- 不遵循SQL标准
- 不支持ACID 原子性 持久性 隔离性 一致性
- 远超SQL的性能
**   使用场景
- 对数据高并发的读写
- 海量数据的读写
- 对数据高可扩展性
** NoSQL不适用场景
- 需要事务支持
- 基于sql的结构化查询存储，处理复杂的关系，需要即时查询
** Memcached
- 很早出现的NoSql数据库
- 数据都存储在内存中，一般不持久化
- 支持简单的key-value模式
- 一般是作为缓存数据库辅助持久化
** Redis
- 几乎覆盖了Memcached的大部分功能
- 数据都在内存中，支持持久化，主用作备份恢复
- 除了支持简单的key-value模式，还支持多种数据结构的存储，比如list,set,hash,zset等
- 一般是作为缓存数据库辅助持久化的数据库
** MongoDB
- 高性能，开源，模式自由(schema free)的文档型数据库
- 数据都在内存中，内存不足
- 虽然是key-value模式，但是对value(json)提供把不常用的数据存储到磁盘
  并且提供了丰富的查询功能
- 支持二进制数据及大型对象
- 可以根据数据的特点代替RDBMS，成为独立的数据库，或者配合RDBMS
* mysql命令参数详解
** 选项
   -u 用户名
   -p 用户密码
   -h 服务器ip地址
   -D 链接的数据库
   -N 不输出列信息
   -B 使用tab键代替默认交互分隔符
   -e 执行SQL语句 (必须在使用的表前面加上数据库)
   其它选项
   -E 垂直输出
   -H 以HTML格式输出
   -X 以XML格式输出
** 实例
   #+begin_src sql
     mysql -ujoker -p123456 -h127.0.0.1 -D school -e "SELECT * FROM student"
   #+end_src

* 数据库概述
** 为什么要使用数据库
   * 持久化(persistance): 将数据保存到可掉电的设备中
   * 持久化的主要作用是将内存中的数据存储在关系型数据库中, 当然也可以存储在磁盘
     文件，XML数据文件中
** 概念
   DBMS 数据库管理系统
   SQL 结构化查询语言
** RDBMS与非RDMBS区别
*** RDBMS
    1. 定义
       - 关系型数据库是把复杂的数据结构归结为二元关系
       - 关系型数据库以行(row)和列(column)的形式存储数据,以便于用户理解，这样的列表
       称为表(table)
       - 表与表之间的数据记录有关系,关系型数据库就是建立在关系模型上的数据库
       - SQL是关系型数据库的查询语言
    2. 优点
       + 复杂查询
         可以用SQL语句方便在一个表以及多个表之间做非常复杂的数据查询
       + 事务支持
         使得对于安全性能很高的数据访问要求得以实现
*** 非RDBMS
    1. 简介
       以键值对储存信息，不需要经过SQL的解析，性能很高。减少不必要的功能，进一步提高
       性能。
    2. 键值型数据库
       通过Key-Value键值的方式来存储数据. 缺点是无法使用条件过滤
    3. 文档型数据库
       此类数据库可存放并获取文档,可以是XML,JSON等格式，在数据库中文档作为处理信息
       的基本单位，一个文档相当于一条记录。mongoDB是最流行的文档型数据库
    4. 搜索引擎数据库
       采用了索引提升检索效率，但是针对全文索引效率较低，搜索引擎数据库应用于搜索
       引擎领域的数据存储形式. 以特定格式储存，检索时性能较好，核心原理：倒排索引
** 关系型数据库设计原则
   * 关系型数据库的典型数据结构就是数据表，这些表的组成都是结构化的
   * 将数据保存到表中，表再放到库中
   * 一个数据库可以有多个表，每个表都有一个名字，用来标识自己，表具有唯一性
   * 表具有一些特性，这些特性定义了数据在表中如何存储
** 表，记录，字段
   * E-R（entity-relationship）模型中的主要概念: 实体集，属性，联系集
   * 一个实体集(class)对应数据库中的一个表(table),一个实体(instance)则对应数据库
     表中的行(row),也称为一条记录(record),一个属性(attribute)则对应数据库中的
     一列。也称为一个字段
** 表与表的关联关系
   * 表与表之间的数据记录有关系，现实世界中各种实体以及实体之间的各种联系均用
     关系模型来表示
   * 四种： 一对一，一对多，多对多，自我引用
   * 两种建表原则
     * 常用一张表，不常用的一张
     * 外键唯一： 主表的主键和从表的外键，形成主外键关系，外键唯一
     * 外键是主键： 主表的主键和从表的主键，形成主外键关系
** 日期时间类型
1. year 年 取值范围 1901 to 2155 1byte 4characters 
2. date 年月日
3. time 时分秒
4. datatime 年月日时分秒
5. timestap 时间戳，年月日时分秒
* 数据类型
1. 浮（定）点型
2. 布尔型 Mysql没有布尔，用tinyint来表示
3. 字符串类型
* 运算符
** 算术运算符
** 比较运算符
** 逻辑运算符
** 位运算符
* DML(Data Manipulation Language,数据库操作语言)
** 简介
   1. 用于数据的添删查改以及检查数据完整性
   2. 注意关键字包括SELECT,DELETE,UPDATE,INSERT
** 数据库导入指令
   #+begin_src sql
     source ~/Documents/mysql/atguigu.sql
     -- soource后跟导入路径
     desc employees
   #+end_src
** 表连接
*** 外连接
1. 左外连接，左表为全表，且当右表数据为空时，该列存在，反之，当右表中数据在左表无对应数值时，
   该列不存在
2. 右外连接，右表为全表
*** 内连接
1. 表示两个表的交集，当左表或者右表数据不存在时，该行不存在
*** 自然连接 
1. sql99提供了特殊语法，自动a查询两张表中相同的字段，然后进行等值连接

* DDL(Data Definition Language, 数据定义语言)
** 简介
   1. 定义了不同的数据库，表，视图，索引等数据库对象，还可以用来创建，
      删除，修改数据库和数据表的结构
   2. 注意关键字有CREATE,DROP,ALTER
** 约束和索引
*** 特点
+ 唯一并且非空，即如果给一个字段设置了主键约束，就不用再设置唯一和非空约束了
+ 一个表最多只能有一个主键约束
+ 创建主键会自动创建对应的索引，同时删除主键对应的索引也会删除
*** 添加主键
**** 方式一
#+begin_src sql
create table [数据名.]表名(
    字段名1 数据类型  primary key ,
    ....
);
或
create table [数据名.]表名(
    字段名1 数据类型,
    ....,
    primary key(字段名1)
);
或
create table [数据名.]表名(
    字段名1 数据类型,
    字段名2 数据类型,
    ....,
    primary key(复合主键字段列表)#如果是复合主键，那么就需要在所有字段列表后面使用这种形式指定，不能在字段后面直接加primary key
);
#+end_src
**** 方式二
- 创建表格后，再给字段添加主键约束
  #+begin_src sql
	alter table 表名称 add primary key (主键字段列表);
  #+end_src
*** 删除主键
#+begin_src sql
	  alter table table_name drop primary key;
#+end_src
*** 唯一约束
- 唯一约束允许为null
- 同一个表可以有多个唯一约束
- 唯一约束可以是某个列的值唯一，也可以多列组合值的唯一
- MySQL会给唯一约束的列上默认创建一个唯一索引
- 删除唯一键只能通过删除对应的索引的方式删除，删除时需要指定唯一键索引名
*** 添加唯一约束
**** 方式一：建表时添加约束
#+begin_src sql
create table [数据名.]表名(
    字段名1 数据类型  primary key ,
    字段名2 数据类型 unique key,
    ....
);

create table [数据名.]表名(
    字段名1 数据类型  primary key ,
    字段名2 数据类型,
    字段名3 数据类型,
    ....,
    unique key(复合唯一字段列表)#如果是复合唯一键，那么就需要在所有字段列表后面使用这种形式指定，不能在字段后面直接加unique key
);
#+end_src
**** 方式二：创建表格以后追加约束
#+begin_src sql
	alter table 表名称 add [constraint 约束名] unique [key] (字段名列表);
	--如果没有指定约束名，(字段名列表)中只有一个字段的，默认是该字段名 
   # 如果是多个字段的默认是字段名列表的第1个字段名

#+end_src
** 模糊查询
*** like关键字
#+begin_src sql
    SELECT
        last_name,salary
    FROM
        employees
    WHERE
        last_name LIKE "__n_l%" --表匹配n前面两个字符，然后n后面再间隔一个
        -- 字符是l，匹配类似于 aansl,ssnsl
    OR last_name like "__$_%" ESCAPE '$';
    -- $_ 此时$表示转义字符，匹配类型为 ki_s 等字符
#+end_src
** 分页
#+begin_src sql
  select * from studentv limit 3,5 --偏移三个，查询五个
#+end_src
* DCL(Data Control Language, 数据控制语言)
** 概述
  1. 用于定义数据库，表，字段，用户的访问权限和安全级别
  2. 主要关键字包括GRANT,REVOKE,COMMIT,ROLLBACK,SAVEPOINT等
** 权限
#+begin_src sql
  show privileges;  --展示系统所有可用权限
  show grants; -- 展示当前用户权限
  grant all privileges on *.* to asatuoyan@location with grant option;
  --grant option 可以设置授权的权限
  revoke insert on *.* from jack@localhost;
  flush privileges;

#+end_src
* 单行函数
** 概述
1. 操作数据对象
2. 接受参数返回结果
3. 只对一行进行变换
4. 每行返回一个结果
5. 可以嵌套
6. 参数可以是一个列或者一个值
** 数值函数
* 聚合函数（分组函数）
** 介绍
作用于一组数据，并且一组数据返回一个值.聚合函数的类型有以下几种
 - AVG()
 - SUM()
 - MAX()
 - MIN()
 - COUNT()
** 聚合函数语法
#+begin_src sql
    SELECT [column,] group function(column),...
    FROM table
    [WHERE condition]
    [GROUP BY column]
    [ORDER BY column]
#+end_src
** AVG和SUM函数
#+begin_src sql
    SELECT AVG(salary),MAX(salary),MIN(salary),SUM(salary)
    FROM employees
    WHERE job_id LIKE '%REP%';
#+end_src
** MIN和MAX函数
可以对任意数据类型的数据使用MIN和MAX函数
#+begin_src sql
    SELECT MIN(hire_date),MAX(hire_date)
    FROM employees;
#+end_src
** COUNT函数
- COUNT(*)返回表中记录总数，适用于任意数据类型
#+begin_src sql
    SELECT COUNT(*)
    FROM employees
    WHERE department_id=50;
#+end_src
- COUNT(expression)返回expression不为空的记录总数
  #+begin_src sql
    SELECT COUNT(commission_pct)
    FROM employees
    WHERE department_id=50;
  #+end_src
- 用count(*),count(1),count(列名)谁好吗
  MylSAM引擎的表在内部有着一计数器维护着行数.Innodb引擎的表用count(*),count(1)直接读取a行数,复杂度是O(n),innodb会具体的遍历列来获取行数。
- 问题: 能不能使用count（列名）替换count(*)?
  不要使用count(*)来替代count(*),count(*)是SQL92定义的标准统计行数的语法，和数据库无关，与NULL和非NULL无关
count(column_name)不会统计此列为NULL值的行
** GROUP BY
- 可以使用GROUP BY子句将表中的数据分成若干组
#+begin_src sql
    SELECT column,group_function(column)
    FROM table
    [WHERE condition]
    [GROUP group_by_expression]
    [ORDER BY column];
#+end_src
- 在SELECT列表中所有未包含在组函数都应该包含在GROUP_BY子句中
* 子查询
** 子查询的基本使用
1. 子查询在主查询之前一次执行完成
2. 子查询的结果被主查询（外查询）使用
3. 注意
   + 子查询包含在括号内
   + 子查询放在比较条件右边
   + 单行操作符对应单行子查询，多行操作符对应多行子查询
** 分类方式
- 按照内查询是否被执行多次，将子查询分为相关（或者关联）子查询和不相关子查询。
- 如果子查询从数据表中查询了数据，而且只执行一次，然后这个数据结果作为子查询的条件执行，那么这样的子查询叫做不相关子查询
- 子查询需要执行多次，即采用循环的方式，先从外部循环开始，每次都传入子查询进行查询，
  然后再将结果反馈给外部，这种嵌套查询的方式称为相关子查询
** 单行比较操作符
=,>,>=,<,<=,<>;
| 操作 | 含义                   |
| <    | less than              |
| <=   | less than and equal    |
| <>   | not equal to           |
| >    | greater than           |
| >=   | greater than and equal |
| =    | equal to               |
** HAVING中的子查询
1. 首先执行子查询
2. 向主查询中的HAVING子句返回结
** CASE中的子查询
在CASE表达式中使用单例子查询：
** 多行子查询
*** 介绍
- 集合比较子查询
- 内查询返回多行
- 使用多行比较操作符
*** 多行比较操作符
| 操作 | 含义                                                     |
| IN   | 等于列表中的任意一个                                     |
| ANY  | 需要和单行比较操作符一起使用，和子查询返回的某一个值比较 |
| ALL  | 需要和单行比较操作符一起使用，和子查询返回的所有值比较   |
| SOME | 实际上是ANY的别名，作用相同，一般使用ANY                 |
* 注意
** DQL(数据查询语言)
*** 简介
     #+begin_src sql
       -- SELECT...
       SELECT 1; 			--没有任何子句
       -- 语法:
	  SELECT 			--标识选择的列
	  FROM            		--标识从哪个表中选择
     #+end_src
     注意： 一般情况下，除非需要使用表中的所有字段数据，最好不要使用
     通配符"*"。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的
     列数据通常会降低查询和使用的应用程序的效率。
     - 通配的符的优势是，当你不知道所使用的列的名称时，可以通过它获取他们
     - 在生产环境下，不推荐你直接使用SELECT * 进行查询
*** 列的别名
    - 重命名一个列
    - 便于计算
    - 紧跟列名，也可以在关键字和别名之间加入AS，别名使用双引号，以便
      在别名中包含空格或者特殊字符时区分大小写
    - AS可以省略
    - 建议别名简短 见名知意
*** 去重
    - 在SELECT语句中使用关键字DISTINCT去除重复行
      #+begin_src sql
	SELECT DISTINCT department_id
	FROM employees;
      #+end_src
    - 注意： DISTINCT会将后面的所有列名的组合进行去重，即两个列的
      数据相同时才会去重
*** 空值参与运算
    - 所有运算符或列值遇到null值，运算的结果都为null
    - MYSQL中空值不等于空字符串，一个空字符串的长度为0，而一个空值的
      长度是空，而且，在MYSQL中，空值是占用空间的。
    - 空值意味着未知，而非常见的
*** 着重号
    - 我们需要保证表中的字段、表名等没有和保留字、数据库
      系统或常用方法冲突。如果真的相同，请在SQL语句中使用
      一对``（着重号）引起来。
*** 查询常数
    1. 可以对常数进行查询，即可以将常数作为一列，用来作为此表的标记
       #+begin_src sql
	 SELECT 'HELLO WORLD' as corporation, last_name FROM employees
       #+end_src
*** 显示表结构
    1. 使用DESCRIBE或DESC命令，表示表结构
       DESCRIBE employees 或 DESC employees
    2. 各个字段的合义
       - Field： 字段名
       - Type: 字段类型
       - Null 表示该列是否可以存放Null值
       - Key 表示该列表是否已经编制索引，PRI表示该列是表主键的一部分;
	 UNI表示该列是UNIQUE索引的一部分;MUL表示在列中某个给定值容许出现多次
       - Default 表示该列是否有默认值，如果有，那么值是多少
       - Extra 表示可以获取与给定列有关的附加信息，列如AUTO_INCREMENT等
*** 过滤数据
    - 使用WHERE子句，将不满足条件的行过滤掉
    - WHERE子句紧跟FROM子句
** TCL(事务控制语言)
** 语言规则
   + SQL可以写在一行或者多行，为了提高可读性，各子句分行写，必要时缩进
   + 每条命令以;(分号)或\g或\G结束
   + 关键字不能被缩写也不能分行
   + 关于标点符号
     - 必须保证所有的()，单引号，双引号是成对结束的
     - 必须使用英文状态下的半角输入方式
     - 字符串和日期类型的数据可以使用单引号('')表示
     - 列的别名，尽量使用双引号("")，而且不建议省略as
** 算术运算符
1. 除法，得到的结果是一个小数
2. 除以0不会报错，返回null
3. 数字和字符串做加法
** 比较运算符
1. Mysql里面的=是比较运算符，而不是赋值运算符
2. 不等于可以使用!= 或者<>
3. 不能使用= 和!= 来和null比较，得使用<=>来进行比较
   #+begin_src sql
	 select 4 between 3 and 9,3 in (2,4,9,3),'morning' like '%orn%';
	'goood' rlike 'go(2,)d','a1234x' regexp 'a\\d+x';
   #+end_src
** 位运算符
- & | ^ ~ << >>
#+begin_src sql
  select 12 & 5,12 | 7, 34 ^ 78,12 << 2, 89 >> 2;
#+end_src
** 逻辑运算符
| 运算符  | 作用     |
|---------+----------|
| NOT或 ! | 逻辑非   |
| AND或&& | 逻辑与   |
| OR或    | 逻辑或   |
| XOR     | 逻辑异或 |
** 修改字段的属性
#+begin_src sql
  alter table person modify height decimal(3,2);
		alter table person modify name int;
		-- 修改字段的表名：慎用
		rename table human to person;
#+end_src
** 修改字段的名
** SQL大小写规范(建议遵守)
   - MYSQL在Windows环境下是大小写不敏感的
   - MYSQL在Linux环境下是大小写敏感的
     + 数据库名，表名，表的别名，变量名是严格区分大小写的
     + 关键字，函数名，列名(或字段名)，列的别名(字段的别名是忽略)大小写的
   - 推荐采用统一的书写规范:
     + 数据库名，表名，表别名，字段名，字段别名等都小写
     + SQL关键字，函数名，绑定变量等都大写

** 注释
   单行注释 #注释文字
   单行注释 -- 注释文字(-- 后面必须跟一个空格)
   多行注释 /* 注释文字 */
** 命名规则(了解)
   1. 数据库、表名不得超过30个字符，变量名限制为29个
   2. 必须只能包含 A–Z, a–z, 0–9, _共63个字符
   3. 数据库名、表名、字段名等对象名中间不要包含空格
   4. 同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名
   5. 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中
      使用`（着重号）引起来
   6. 保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据
      类型在一个表里是整数，那在另一个表里可就别变成字符型了
* 展示可用的字符集合
- 大小写铭感 修改校对集合
- 修改已有表格的字符集
- 修改已有字段的字符集 库表字段
#+begin_src sql
  show character set;
create database test charset utf8mb4 collate utf8mb4_0900_as_cs;
#+end_src
* 问题
** mysql proc can't load
#+begin_src shell
  mysql-upgrade -uroot -p
  REPAIR TABLE mysql.proc;
#+end_src
