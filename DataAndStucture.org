* 队列
** 概述
1. 队列先进先出，每次插入时，插入到元素的最后，当取出时，先取出元素的第一个。
* 栈
** 概述
1. 队列先进后出，每次进行插入时，插入到最后的元素，每次取出时，取出最后的元素
2. 先入后出(FILO-First-In-Last Out)的有序列表
3. 栈(stack)是一种插入和删除只能在线性表的同一端进行的限制性线性表，为允许插入和插入
   的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底。
4. 先放入的元素在相对接近栈底，后放入的元素相对接近栈顶。删除时，后放入的元素最先删除，
   先放入的元素后删除。
** 栈实现综合计算器（中缀表达式）
*** 中缀表达式
**** 概述
中缀表达式是一个通用的算术或逻辑公式表达方法，操作符是以中缀形式处于操作数的中间，中缀表达式
不容易被电脑解析逻辑优先顺序。在中缀表达式中，括号是必须的，计算机必须用括号将操作符和对应的操作
数括起来，用于指示计算的顺序.
不允许两个操作符中间没有运算符，也不允许两个运算符中间没有操作符
**** 步骤
求值6+1-2*3+1
| 读取元素 | 解析后的表达式 | 说明 |
|        6 |              6 |      |
|        + |             6+ |      |
|        1 |            6+1 |      |
|        - |             7- |   1) |
|        2 |            7-2 |      |
|        * |           7-2* |   2) |
|        3 |          7-2*3 |   3) |
|        + |           7-6+ |   4) |
|        1 |              1 |   5) |
|          |              2 |      |
首先将数字压入栈中
1) 当连续将两个操作符和一个运算符压入数字栈和操作符栈中以后，看到第二个运算符，第二个运算符不大于第一个，所以从栈中推出两个数，运算符栈中提取一个，进行运算,
2) 再次看到运算符，因为乘的优先级高，所以不进行运算
3) 看到乘法后的操作数，将其压入数字栈，乘法已经被压入操作符栈
4) 再次看到+，优先级不高于乘法，将乘法取出，取出两个操作数进行运算，
5) 到达值的末尾以后，依次取出一个运算符和两个操作数进行运算，最后得到结果
**** 程序实现
1) 首先建立一个栈，需要的功能有，入栈，出栈，查看栈的第一个数，运算符优先级，是否是运算符
2) 开始创建栈，一个操作数栈，一个运算符栈,一些需要用到的变量,保存数字，以及参于运算的
3) 遍历整个表达式
   1. 如果是运算符,运算则判断符栈是否为空
      1. 运算符栈为空，则将操作符压入到栈中
      2. 如果运算符栈不为空，则碰到的运算符于栈顶运算符进行比较，
         1. 如果当前运算符大于栈顶运算符，则将当前运算符压入栈中，不进行运算
         2. 如果当前运算符小于等于栈顶运算符，则将栈顶运算符取出，再从操作数栈取出
            两个数，一起计算
   2. 如果操作数，则需要继续向下读取，直到碰到不是数的值，然后将数进行拼接
      最后将操作数，压入栈中
      1. 如果char已经是最后一个字符，则直接进行入栈
      2. 如果连接之后碰到运算符，则直接进行入栈
   3. 如果为空，直接入符号栈
   4. 此时索引+1，判断是否已经扫描到了表达式的最后，最后则break;
   5. 最后将符号栈和操作数栈的元素取出，依次进行运算

